<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>RS4OTRS_API</Name>
    <Version>6.44.0</Version>
    <Vendor>Radiant System</Vendor>
    <URL>https://radiantsystem.com</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</License>
    <Description Lang="en">API for common functionality of ((OTRS)) Community Edition.</Description>
    <Description Lang="ru">API для общего функционала ((OTRS)) Community Edition.</Description>
    <Framework>6.x.x</Framework>
    <IntroInstall Lang="en" Title="Installation Information" Type="pre"><![CDATA[
<br/>
You are about to install "RS4OTRS_API" module.
    ]]></IntroInstall>
    <IntroInstall Lang="ru" Title="Информация по установке" Type="pre"><![CDATA[
<br/>
Вы собираетесь установить модуль "RS4OTRS_API"
    ]]></IntroInstall>
    <IntroInstall Lang="en" Title="Install information" Type="post"><![CDATA[
<br/>
Thank you for choosing the "RS4OTRS_API" module.<br/>
<br/>
Attention! Minimum requirements for mobile applications:<br/>
Radiant Mobile Agent v1.5 — for Android<br/>
Radiant Mobile Agent v1.5 — for iOS<br/>
<br/>
For install completion in the file zzz_otrs.conf inside section <Location /otrs> you should write:<br/>
<br/>
RewriteEngine on<br/>
RewriteRule "/api/(\w+)/(\w+)" "/otrs/json.pl?Action=$1&Subaction=$2" [QSA,L]<br/>
<br/>
and restart Apache.<br/>
<br/>
Most Apache installations have a conf.d directory included. On Linux systems you can usually find this directory under /etc/apache or /etc/apache2. Log in as root, change to the conf.d directory and link the appropriate template in /opt/otrs/scripts/apache2-httpd.include.conf to a file called zzz_otrs.conf in the Apache configuration directory (to make sure it is loaded after the other configurations). https://doc.radiantsd.com/doc/manual/admin/stable/en/html/manual-installation-of-otrs.html
    ]]></IntroInstall>
    <IntroInstall Lang="ru" Title="Информация по установке" Type="post"><![CDATA[
<br/>
Спасибо за Ваш выбор модуля RS4OTRS_API.<br/>
<br/>
Внимание! Минимальные требования для мобильных приложений:<br/>
Radiant Mobile Agent v1.5 — для Android<br/>
Radiant Mobile Agent v1.5 — для iOS<br/>
<br/>
Для завершения установки в файле zzz_otrs.conf в разделе <Location /otrs> необходимо прописать:<br/>
<br/>
RewriteEngine on<br/>
RewriteRule "/api/(\w+)/(\w+)" "/otrs/json.pl?Action=$1&Subaction=$2" [QSA,L]<br/>
<br/>
и выполнить перезапуск (restart) Apache.<br/>
<br/>
В большинстве случаев при установке Apache есть каталог conf.d. В системах Linux можно найти этот каталог в /etc/apache или /etc/apache2. Войдите в систему с правами root, перейдите в каталог conf.d и свяжите соответствующий шаблон в /opt/otrs/scripts/apache2-httpd.include.conf с файлом zzz_otrs.conf в каталоге конфигурации Apache (чтобы убедиться, что он загружается после других конфигураций). https://doc.radiantsd.com/doc/manual/admin/stable/en/html/manual-installation-of-otrs.html
    ]]></IntroInstall>
    <BuildDate>2022-01-31 14:04:25</BuildDate>
    <BuildHost>localhost</BuildHost>
    <CodeInstall Type="post"><![CDATA[
my $CodeModule = 'var::packagesetup::' . $Param{Structure}{Name}{Content};

$Kernel::OM->Get($CodeModule)->CodeInstall();
    ]]></CodeInstall>

    <CodeUninstall Type="pre"><![CDATA[
my $CodeModule = 'var::packagesetup::' . $Param{Structure}{Name}{Content};

$Kernel::OM->Get($CodeModule)->CodeUninstall();
    ]]></CodeUninstall>

    <CodeReinstall Type="pre"><![CDATA[
my $CodeModule = 'var::packagesetup::' . $Param{Structure}{Name}{Content};

$Kernel::OM->Get($CodeModule)->CodeReinstall();
    ]]></CodeReinstall>

    <CodeUpgrade Type="pre"><![CDATA[
my $CodeModule = 'var::packagesetup::' . $Param{Structure}{Name}{Content};

$Kernel::OM->Get($CodeModule)->CodeUpgrade();
    ]]></CodeUpgrade>

    <Filelist>

        <File Location="Custom/Kernel/Modules/API/Queues.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFQSTo6UXVldWVzOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwpubyB3YXJuaW5ncyAncmVkZWZpbmUnOwoKdXNlIERhdGE6OkR1bXBlcjsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgJFNlbGYtPntQYXJhbX0gPSBcJVBhcmFtOwoKICAgIHJldHVybiAkU2VsZjsKfQoKIyBUT0RPOiDQtNC+0LHQsNCy0LjRgtGMINGC0LXRgdGC0YsKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRMYXlvdXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CiAgICBteSAkUGFyYW1PYmplY3QgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcpOwogICAgbXkgJFRpY2tldE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpUaWNrZXQnKTsKCiAgICBteSAkQVBJUXVldWVPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6QVBJOjpRdWV1ZScpOwoKICAgIG15ICRTdWJhY3Rpb24gPSAkU2VsZi0+e1N1YmFjdGlvbn07CgogICAgbXkgJFN1Y2Nlc3MgPSAwOwogICAgbXkgJFJlc3VsdCA9IHt9OwoKICAgIGlmICggJFN1YmFjdGlvbiBlcSAnR2V0UXVldWVMaXN0JyApIHsKCiAgICAgICAgJFJlc3VsdCA9ICRBUElRdWV1ZU9iamVjdC0+R2V0UXVldWVMaXN0KAogICAgICAgICAgICAleyAkU2VsZi0+e1BhcmFtfSB9LAogICAgICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9CiAgICAgICAgKTsKCiAgICB9IGVsc2UgewoKICAgICAgICAkUmVzdWx0ID0gewogICAgICAgICAgICBSZXNwb25zZSA9PiAiRVJST1IiLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiTWV0aG9kIGRvZXNuJ3QgZXhpc3QiCiAgICAgICAgfTsKICAgIH0KCiAgICBteSAkSlNPTiA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpBUEk6OlV0aWwnKQogICAgICAgICAgICAgICAtPkNsZWFuSlNPTiggRGF0YSA9PiAkUmVzdWx0ICk7CgogICAgcmV0dXJuICRMYXlvdXRPYmplY3QtPkF0dGFjaG1lbnQoCiAgICAgICAgQ29udGVudFR5cGUgPT4gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9JyAuICRMYXlvdXRPYmplY3QtPntDaGFyc2V0fSwKICAgICAgICBDb250ZW50ICAgICA9PiAkSlNPTiwKICAgICAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKICAgICAgICBOb0NhY2hlICAgICA9PiAxLAogICAgKTsKfQoKMTsK</File>
        <File Location="Custom/Kernel/Modules/API/Customers.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFQSTo6Q3VzdG9tZXJzOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwpubyB3YXJuaW5ncyAncmVkZWZpbmUnOwoKdXNlIERhdGE6OkR1bXBlcjsKdXNlIFVSSTo6RXNjYXBlOwoKb3VyICRPYmplY3RNYW5hZ2VyRGlzYWJsZWQgPSAxOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgJFNlbGYtPntQYXJhbX0gPSBcJVBhcmFtOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRMYXlvdXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CiAgICBteSAkUGFyYW1PYmplY3QgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcpOwogICAgbXkgJFRpY2tldE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpUaWNrZXQnKTsKICAgIG15ICRDdXN0b21lclVzZXJPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q3VzdG9tZXJVc2VyJyk7CgogICAgbXkgJEFQSUN1c3RvbWVyT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6Q3VzdG9tZXInKTsKCiAgICBteSAkU3ViYWN0aW9uID0gJFNlbGYtPntTdWJhY3Rpb259OwoKICAgIG15ICRTdWNjZXNzID0gMDsKICAgIG15ICRSZXN1bHQgPSB7fTsKCiAgICBpZiAoICRTdWJhY3Rpb24gZXEgJ0dldEN1c3RvbWVyTGlzdCcgKSB7CgogICAgICAgICRSZXN1bHQgPSAkQVBJQ3VzdG9tZXJPYmplY3QtPkdldEN1c3RvbWVyTGlzdCgKICAgICAgICAgICAgJXsgJFNlbGYtPntQYXJhbX0gfSwKICAgICAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfQogICAgICAgICk7CgogICAgfSBlbHNpZiAoICRTdWJhY3Rpb24gZXEgJ0dldEN1c3RvbWVyVXNlckxpc3QnICkgewoKICAgICAgICAkUmVzdWx0ID0gJEFQSUN1c3RvbWVyT2JqZWN0LT5HZXRDdXN0b21lclVzZXJMaXN0KAogICAgICAgICAgICAleyAkU2VsZi0+e1BhcmFtfSB9LAogICAgICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9CiAgICAgICAgKTsKCiAgICB9IGVsc2lmICggJFN1YmFjdGlvbiBlcSAnR2V0Q3VzdG9tZXJVc2VyJyApIHsKCiAgICAgICAgJFJlc3VsdCA9ICRBUElDdXN0b21lck9iamVjdC0+R2V0Q3VzdG9tZXJVc2VyKAogICAgICAgICAgICAleyAkU2VsZi0+e1BhcmFtfSB9LAogICAgICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9CiAgICAgICAgKTsKCiAgICB9IGVsc2lmICggJFN1YmFjdGlvbiBlcSAnQ3JlYXRlQ3VzdG9tZXJVc2VyJyApIHsKCiAgICAgICAgJFJlc3VsdCA9ICRBUElDdXN0b21lck9iamVjdC0+Q3JlYXRlQ3VzdG9tZXJVc2VyKAogICAgICAgICAgICAleyAkU2VsZi0+e1BhcmFtfSB9LAogICAgICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9CiAgICAgICAgKTsKCiAgICB9IGVsc2UgewoKICAgICAgICAkUmVzdWx0ID0gewogICAgICAgICAgICBSZXNwb25zZSA9PiAiRVJST1IiLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiTWV0aG9kIGRvZXNuJ3QgZXhpc3QiCiAgICAgICAgfTsKICAgIH0KCiAgICBteSAkSlNPTiA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpBUEk6OlV0aWwnKQogICAgICAgICAgICAgICAtPkNsZWFuSlNPTiggRGF0YSA9PiAkUmVzdWx0ICk7CgogICAgcmV0dXJuICRMYXlvdXRPYmplY3QtPkF0dGFjaG1lbnQoCiAgICAgICAgQ29udGVudFR5cGUgPT4gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9JyAuICRMYXlvdXRPYmplY3QtPntDaGFyc2V0fSwKICAgICAgICBDb250ZW50ICAgICA9PiAkSlNPTiwKICAgICAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKICAgICAgICBOb0NhY2hlICAgICA9PiAxLAogICAgKTsKfQoKMTsK</File>
        <File Location="Custom/Kernel/Modules/API/Services.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFQSTo6U2VydmljZXM7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cm5vIHdhcm5pbmdzICdyZWRlZmluZSc7Cgp1c2UgRGF0YTo6RHVtcGVyOwoKb3VyICRPYmplY3RNYW5hZ2VyRGlzYWJsZWQgPSAxOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAkU2VsZi0+e1BhcmFtfSA9IFwlUGFyYW07CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJExheW91dE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKICAgIG15ICRQYXJhbU9iamVjdCAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6V2ViOjpSZXF1ZXN0Jyk7CiAgICBteSAkVGlja2V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlRpY2tldCcpOwoKICAgIG15ICRBUElTZXJ2aWNlT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6U2VydmljZScpOwoKICAgIG15ICRTdWJhY3Rpb24gPSAkU2VsZi0+e1N1YmFjdGlvbn07CgogICAgbXkgJFN1Y2Nlc3MgPSAwOwogICAgbXkgJFJlc3VsdCA9IHt9OwoKICAgIGlmICggJFN1YmFjdGlvbiBlcSAnR2V0U2VydmljZUxpc3QnICkgewoKICAgICAgICAkUmVzdWx0ID0gJEFQSVNlcnZpY2VPYmplY3QtPkdldFNlcnZpY2VMaXN0KAogICAgICAgICAgICAleyAkU2VsZi0+e1BhcmFtfSB9LAogICAgICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9CiAgICAgICAgKTsKCiAgICB9IGVsc2UgewoKICAgICAgICAkUmVzdWx0ID0gewogICAgICAgICAgICBSZXNwb25zZSA9PiAiRVJST1IiLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiTWV0aG9kIGRvZXNuJ3QgZXhpc3QiCiAgICAgICAgfTsKICAgIH0KCiAgICBteSAkSlNPTiA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpBUEk6OlV0aWwnKQogICAgICAgICAgICAgICAtPkNsZWFuSlNPTiggRGF0YSA9PiAkUmVzdWx0ICk7CgogICAgcmV0dXJuICRMYXlvdXRPYmplY3QtPkF0dGFjaG1lbnQoCiAgICAgICAgQ29udGVudFR5cGUgPT4gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9JyAuICRMYXlvdXRPYmplY3QtPntDaGFyc2V0fSwKICAgICAgICBDb250ZW50ICAgICA9PiAkSlNPTiwKICAgICAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKICAgICAgICBOb0NhY2hlICAgICA9PiAxLAogICAgKTsKfQoKMTsK</File>
        <File Location="Custom/Kernel/Modules/API/Tickets.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/API/Users.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFQSTo6VXNlcnM7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cm5vIHdhcm5pbmdzICdyZWRlZmluZSc7Cgp1c2UgRGF0YTo6RHVtcGVyOwoKb3VyICRPYmplY3RNYW5hZ2VyRGlzYWJsZWQgPSAxOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAkU2VsZi0+e1BhcmFtfSA9IFwlUGFyYW07CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJExheW91dE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKICAgIG15ICRQYXJhbU9iamVjdCAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6V2ViOjpSZXF1ZXN0Jyk7CiAgICBteSAkVGlja2V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlRpY2tldCcpOwoKICAgIG15ICRBUElVc2VyT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6VXNlcicpOwoKICAgIG15ICRTdWJhY3Rpb24gPSAkU2VsZi0+e1N1YmFjdGlvbn07CgogICAgbXkgJFN1Y2Nlc3MgPSAwOwogICAgbXkgJFJlc3VsdCA9IHt9OwoKICAgIGlmICggJFN1YmFjdGlvbiBlcSAnR2V0VXNlckxpc3QnICkgewoKICAgICAgICAkUmVzdWx0ID0gJEFQSVVzZXJPYmplY3QtPkdldFVzZXJMaXN0KAogICAgICAgICAgICAleyAkU2VsZi0+e1BhcmFtfSB9LAogICAgICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9CiAgICAgICAgKTsKICAgIH0KICAgIGVsc2lmICggJFN1YmFjdGlvbiBlcSAnR2V0VXNlclBlcm1pc3Npb25zJyApIHsKCiAgICAgICAgJFJlc3VsdCA9ICRBUElVc2VyT2JqZWN0LT5HZXRVc2VyUGVybWlzc2lvbnMoCiAgICAgICAgICAgICV7ICRTZWxmLT57UGFyYW19IH0sCiAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0KICAgICAgICApOwoKICAgIH0gZWxzZSB7CgogICAgICAgICRSZXN1bHQgPSB7CiAgICAgICAgICAgIFJlc3BvbnNlID0+ICJFUlJPUiIsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJNZXRob2QgZG9lc24ndCBleGlzdCIKICAgICAgICB9OwogICAgfQoKICAgIG15ICRKU09OID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6VXRpbCcpCiAgICAgICAgICAgICAgIC0+Q2xlYW5KU09OKCBEYXRhID0+ICRSZXN1bHQgKTsKCiAgICByZXR1cm4gJExheW91dE9iamVjdC0+QXR0YWNobWVudCgKICAgICAgICBDb250ZW50VHlwZSA9PiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD0nIC4gJExheW91dE9iamVjdC0+e0NoYXJzZXR9LAogICAgICAgIENvbnRlbnQgICAgID0+ICRKU09OLAogICAgICAgIFR5cGUgICAgICAgID0+ICdpbmxpbmUnLAogICAgICAgIE5vQ2FjaGUgICAgID0+IDEsCiAgICApOwp9CgoxOwo=</File>
        <File Location="Custom/Kernel/Modules/API/Filters.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFQSTo6RmlsdGVyczsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKbm8gd2FybmluZ3MgJ3JlZGVmaW5lJzsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkU2VsZiA9IHslUGFyYW19OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICRTZWxmLT57UGFyYW19ID0gXCVQYXJhbTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkTGF5b3V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpOwogICAgbXkgJFBhcmFtT2JqZWN0ICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpXZWI6OlJlcXVlc3QnKTsKICAgIG15ICRUaWNrZXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6VGlja2V0Jyk7CiAgICBteSAkQ29uZmlnT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKTsKCiAgICBteSAkQVBJRmlsdGVyT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6RmlsdGVyJyk7CgogICAgbXkgJFN1YmFjdGlvbiA9ICRTZWxmLT57U3ViYWN0aW9ufTsKCiAgICBteSAkU3VjY2VzcyA9IDA7CiAgICBteSAkUmVzdWx0ID0ge307CgogICAgaWYgKCAkU3ViYWN0aW9uIGVxICdHZXRUaWNrZXRWaWV3cycgKSB7CgogICAgICAgICRSZXN1bHQgPSAkQVBJRmlsdGVyT2JqZWN0LT5HZXRUaWNrZXRWaWV3cygKICAgICAgICAgICAgJXsgJFNlbGYtPntQYXJhbX0gfSwKICAgICAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfQogICAgICAgICk7CgogICAgfSBlbHNlIHsKCiAgICAgICAgJFJlc3VsdCA9IHsKICAgICAgICAgICAgUmVzcG9uc2UgPT4gIkVSUk9SIiwKICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk1ldGhvZCBkb2Vzbid0IGV4aXN0IgogICAgICAgIH07CiAgICB9CgogICAgbXkgJEpTT04gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6QVBJOjpVdGlsJykKICAgICAgICAgICAgICAgLT5DbGVhbkpTT04oIERhdGEgPT4gJFJlc3VsdCApOwoKICAgIHJldHVybiAkTGF5b3V0T2JqZWN0LT5BdHRhY2htZW50KAogICAgICAgIENvbnRlbnRUeXBlID0+ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PScgLiAkTGF5b3V0T2JqZWN0LT57Q2hhcnNldH0sCiAgICAgICAgQ29udGVudCAgICAgPT4gJEpTT04sCiAgICAgICAgVHlwZSAgICAgICAgPT4gJ2lubGluZScsCiAgICAgICAgTm9DYWNoZSAgICAgPT4gMSwKICAgICk7Cn0KCjE7Cg==</File>
        <File Location="Custom/Kernel/Modules/API/System.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFQSTo6U3lzdGVtOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwpubyB3YXJuaW5ncyAncmVkZWZpbmUnOwoKdXNlIERhdGE6OkR1bXBlcjsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgJFNlbGYtPntQYXJhbX0gPSBcJVBhcmFtOwoKICAgIHJldHVybiAkU2VsZjsKfQoKIyBUT0RPOiDQtNC+0LHQsNCy0LjRgtGMINGC0LXRgdGC0YsKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRMYXlvdXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CgogICAgbXkgJEFQSVN5c3RlbU9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpBUEk6OlN5c3RlbScpOwoKICAgIG15ICRTdWJhY3Rpb24gPSAkU2VsZi0+e1N1YmFjdGlvbn07CgogICAgbXkgJFN1Y2Nlc3MgPSAwOwogICAgbXkgJFJlc3VsdCA9IHt9OwoKICAgIGlmICggJFN1YmFjdGlvbiBlcSAnR2V0UGFja2FnZUxpc3QnICkgewoKICAgICAgICAkUmVzdWx0ID0gJEFQSVN5c3RlbU9iamVjdC0+R2V0UGFja2FnZUxpc3QoCiAgICAgICAgICAgICV7ICRTZWxmLT57UGFyYW19IH0sCiAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0KICAgICAgICApOwogICAgfQogICAgZWxzaWYgKCAkU3ViYWN0aW9uIGVxICdHZXREeW5hbWljRmllbGRMaXN0JyApIHsKCiAgICAgICAgJFJlc3VsdCA9ICRBUElTeXN0ZW1PYmplY3QtPkdldER5bmFtaWNGaWVsZExpc3QoCiAgICAgICAgICAgICV7ICRTZWxmLT57UGFyYW19IH0sCiAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0KICAgICAgICApOwogICAgfQogICAgZWxzZSB7CgogICAgICAgICRSZXN1bHQgPSB7CiAgICAgICAgICAgIFJlc3BvbnNlID0+ICJFUlJPUiIsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJNZXRob2QgZG9lc24ndCBleGlzdCIKICAgICAgICB9OwogICAgfQoKICAgIG15ICRKU09OID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6VXRpbCcpCiAgICAgICAgICAgICAgIC0+Q2xlYW5KU09OKCBEYXRhID0+ICRSZXN1bHQgKTsKCiAgICByZXR1cm4gJExheW91dE9iamVjdC0+QXR0YWNobWVudCgKICAgICAgICBDb250ZW50VHlwZSA9PiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD0nIC4gJExheW91dE9iamVjdC0+e0NoYXJzZXR9LAogICAgICAgIENvbnRlbnQgICAgID0+ICRKU09OLAogICAgICAgIFR5cGUgICAgICAgID0+ICdpbmxpbmUnLAogICAgICAgIE5vQ2FjaGUgICAgID0+IDEsCiAgICApOwp9CgoxOwo=</File>
        <File Location="Custom/Kernel/Modules/API/Settings.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFQSTo6U2V0dGluZ3M7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cm5vIHdhcm5pbmdzICdyZWRlZmluZSc7Cgp1c2UgRGF0YTo6RHVtcGVyOwoKb3VyICRPYmplY3RNYW5hZ2VyRGlzYWJsZWQgPSAxOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAkU2VsZi0+e1BhcmFtfSA9IFwlUGFyYW07CgogICAgcmV0dXJuICRTZWxmOwp9CgojIFRPRE86INC00L7QsdCw0LLQuNGC0Ywg0YLQtdGB0YLRiwpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJExheW91dE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKICAgIG15ICRQYXJhbU9iamVjdCAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6V2ViOjpSZXF1ZXN0Jyk7CiAgICBteSAkVGlja2V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlRpY2tldCcpOwoKICAgIG15ICRBUElTZXR0aW5nT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6U2V0dGluZycpOwoKICAgIG15ICRTdWJhY3Rpb24gPSAkU2VsZi0+e1N1YmFjdGlvbn07CgogICAgbXkgJFN1Y2Nlc3MgPSAwOwogICAgbXkgJFJlc3VsdCA9IHt9OwoKICAgIGlmICggJFN1YmFjdGlvbiBlcSAnR2V0TGFuZ3VhZ2VMaXN0JyApIHsKCiAgICAgICAgJFJlc3VsdCA9ICRBUElTZXR0aW5nT2JqZWN0LT5HZXRMYW5ndWFnZUxpc3QoCiAgICAgICAgICAgICV7ICRTZWxmLT57UGFyYW19IH0sCiAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0KICAgICAgICApOwoKICAgIH0gZWxzaWYgKCAkU3ViYWN0aW9uIGVxICdTZXRQdXNoTm90aWZpY2F0aW9uVG9rZW4nICkgewoKICAgICAgICAkUmVzdWx0ID0gJEFQSVNldHRpbmdPYmplY3QtPlNldFB1c2hOb3RpZmljYXRpb25Ub2tlbigKICAgICAgICAgICAgJXsgJFNlbGYtPntQYXJhbX0gfSwKICAgICAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfQogICAgICAgICk7CgogICAgfSBlbHNlIHsKCiAgICAgICAgJFJlc3VsdCA9IHsKICAgICAgICAgICAgUmVzcG9uc2UgPT4gIkVSUk9SIiwKICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk1ldGhvZCBkb2Vzbid0IGV4aXN0IgogICAgICAgIH07CiAgICB9CgogICAgbXkgJEpTT04gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6QVBJOjpVdGlsJykKICAgICAgICAgICAgICAgLT5DbGVhbkpTT04oIERhdGEgPT4gJFJlc3VsdCApOwoKICAgIHJldHVybiAkTGF5b3V0T2JqZWN0LT5BdHRhY2htZW50KAogICAgICAgIENvbnRlbnRUeXBlID0+ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PScgLiAkTGF5b3V0T2JqZWN0LT57Q2hhcnNldH0sCiAgICAgICAgQ29udGVudCAgICAgPT4gJEpTT04sCiAgICAgICAgVHlwZSAgICAgICAgPT4gJ2lubGluZScsCiAgICAgICAgTm9DYWNoZSAgICAgPT4gMSwKICAgICk7Cn0KCjE7Cg==</File>
        <File Location="Custom/Kernel/Modules/API/Sla.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFQSTo6U2xhOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwpubyB3YXJuaW5ncyAncmVkZWZpbmUnOwoKdXNlIERhdGE6OkR1bXBlcjsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgJFNlbGYtPntQYXJhbX0gPSBcJVBhcmFtOwoKICAgIHJldHVybiAkU2VsZjsKfQoKIyBUT0RPOiDQtNC+0LHQsNCy0LjRgtGMINGC0LXRgdGC0YsKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRMYXlvdXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CiAgICBteSAkUGFyYW1PYmplY3QgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcpOwogICAgbXkgJFRpY2tldE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpUaWNrZXQnKTsKCiAgICBteSAkQVBJU0xBT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6U0xBJyk7CgogICAgbXkgJFN1YmFjdGlvbiA9ICRTZWxmLT57U3ViYWN0aW9ufTsKCiAgICBteSAkU3VjY2VzcyA9IDA7CiAgICBteSAkUmVzdWx0ID0ge307CgogICAgaWYgKCAkU3ViYWN0aW9uIGVxICdHZXRTTEFMaXN0JyApIHsKCiAgICAgICAgJFJlc3VsdCA9ICRBUElTTEFPYmplY3QtPkdldFNMQUxpc3QoCiAgICAgICAgICAgICV7ICRTZWxmLT57UGFyYW19IH0sCiAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0KICAgICAgICApOwoKICAgIH0gZWxzZSB7CgogICAgICAgICRSZXN1bHQgPSB7CiAgICAgICAgICAgIFJlc3BvbnNlID0+ICJFUlJPUiIsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJNZXRob2QgZG9lc24ndCBleGlzdCIKICAgICAgICB9OwogICAgfQoKICAgIG15ICRKU09OID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6VXRpbCcpCiAgICAgICAgICAgICAgIC0+Q2xlYW5KU09OKCBEYXRhID0+ICRSZXN1bHQgKTsKCiAgICByZXR1cm4gJExheW91dE9iamVjdC0+QXR0YWNobWVudCgKICAgICAgICBDb250ZW50VHlwZSA9PiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD0nIC4gJExheW91dE9iamVjdC0+e0NoYXJzZXR9LAogICAgICAgIENvbnRlbnQgICAgID0+ICRKU09OLAogICAgICAgIFR5cGUgICAgICAgID0+ICdpbmxpbmUnLAogICAgICAgIE5vQ2FjaGUgICAgID0+IDEsCiAgICApOwp9CgoxOwo=</File>
        <File Location="Custom/Kernel/System/Ticket/Event/CheckInstalledPackage.pm" Permission="644" Encode="Base64">cGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6VGlja2V0OjpFdmVudDo6Q2hlY2tJbnN0YWxsZWRQYWNrYWdlOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwp1c2UgdXRmODsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpMb2cnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpUaWNrZXQnLAopOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgZm9yIChxdyhEYXRhIEV2ZW50IENvbmZpZykpIHsKICAgICAgICBpZiAoICEkUGFyYW17JF99ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkXyEiCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgbXkgJE1pbmltYWxWZXJzaW9uID0gJzYuMS4yNCc7CgogICAgaWYgKCAkUGFyYW17RXZlbnR9ID1+IC9QYWNrYWdlKEluc3RhbGx8VXBncmFkZXxSZWluc3RhbGwpLyApIHsKICAgICAgICBpZiAoICRQYXJhbXtEYXRhfXtOYW1lfSBlcSAnUlM0T1RSU19BZHZhbmNlZFRpY2tldFNlYXJjaCcKICAgICAgICAgICAgYW5kIHZlcnNpb24tPnBhcnNlKCAkUGFyYW17RGF0YX17VmVyc2lvbn0gKSA+PQogICAgICAgICAgICB2ZXJzaW9uLT5wYXJzZSgkTWluaW1hbFZlcnNpb24pICkKICAgICAgICB7CiAgICAgICAgICAgICRTZWxmLT5Ub2dnbGVBdXRvbG9hZE1vZHVsZSggVG9nZ2xlID0+IDAgKTsKICAgICAgICB9CiAgICB9CiAgICBlbHNpZiAoICRQYXJhbXtFdmVudH0gZXEgJ1BhY2thZ2VVbmluc3RhbGwnICkgewogICAgICAgIGlmICggJFBhcmFte0RhdGF9e05hbWV9IGVxICdSUzRPVFJTX0FkdmFuY2VkVGlja2V0U2VhcmNoJwogICAgICAgICAgICBhbmQgdmVyc2lvbi0+cGFyc2UoICRQYXJhbXtEYXRhfXtWZXJzaW9ufSApID49CiAgICAgICAgICAgIHZlcnNpb24tPnBhcnNlKCRNaW5pbWFsVmVyc2lvbikgKQogICAgICAgIHsKICAgICAgICAgICAgJFNlbGYtPlRvZ2dsZUF1dG9sb2FkTW9kdWxlKCBUb2dnbGUgPT4gMSApOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gMTsKfQoKc3ViIFRvZ2dsZUF1dG9sb2FkTW9kdWxlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJEF1dG9sb2FkVGlja2V0U2VhcmNoTmFtZSA9CiAgICAgICdBdXRvbG9hZFBlcmxQYWNrYWdlcyMjIzExMDAtUlNfVGlja2V0U2VhcmNoJzsKCiAgICBteSAkU3lzQ29uZmlnT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlN5c0NvbmZpZycpOwoKICAgICMgR2V0dGluZyBhdXRvbG9hZCBtb2R1bGUgcGFyYW0gZm9yIFRpY2tldFNlYXJjaAogICAgbXkgJUF1dG9sb2FkVGlja2V0U2VhcmNoUGFyYW0gPQogICAgICAkU3lzQ29uZmlnT2JqZWN0LT5TZXR0aW5nR2V0KCBOYW1lID0+ICRBdXRvbG9hZFRpY2tldFNlYXJjaE5hbWUgKTsKCiAgICAjIExvY2sgaXQgZm9yIGNoYW5naW5nCiAgICBteSAkRXhjbHVzaXZlTG9ja0dVSUQgPSAkU3lzQ29uZmlnT2JqZWN0LT5TZXR0aW5nTG9jaygKICAgICAgICBEZWZhdWx0SUQgPT4gJEF1dG9sb2FkVGlja2V0U2VhcmNoUGFyYW17RGVmYXVsdElEfSwKICAgICAgICBGb3JjZSAgICAgPT4gMSwKICAgICAgICBVc2VySUQgICAgPT4gMQogICAgKTsKCiAgICBpZiAoICEkRXhjbHVzaXZlTG9ja0dVSUQgKSB7CiAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJDYW5ub3QgbG9jayAkQXV0b2xvYWRUaWNrZXRTZWFyY2hOYW1lISIKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBteSAlU2V0dGluZ1VwZGF0ZVJlc3VsdCA9ICRTeXNDb25maWdPYmplY3QtPlNldHRpbmdVcGRhdGUoCiAgICAgICAgTmFtZSAgICAgICAgICAgICAgPT4gJEF1dG9sb2FkVGlja2V0U2VhcmNoTmFtZSwKICAgICAgICBJc1ZhbGlkICAgICAgICAgICA9PiAxLAogICAgICAgIFVzZXJJRCAgICAgICAgICAgID0+IDEsCiAgICAgICAgRXhjbHVzaXZlTG9ja0dVSUQgPT4gJEV4Y2x1c2l2ZUxvY2tHVUlELAogICAgICAgIEVmZmVjdGl2ZVZhbHVlICAgID0+ICRQYXJhbXtUb2dnbGV9CiAgICAgICAgPyAkQXV0b2xvYWRUaWNrZXRTZWFyY2hQYXJhbXtEZWZhdWx0VmFsdWV9CiAgICAgICAgOiBbXQogICAgKTsKCiAgICBpZiAoICEkU2V0dGluZ1VwZGF0ZVJlc3VsdHtTdWNjZXNzfSApIHsKICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gIkNhbm5vdCBsb2NrICRBdXRvbG9hZFRpY2tldFNlYXJjaE5hbWUhIgogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIG15ICVEZXBsb3lSZXN1bHQgPSAkU3lzQ29uZmlnT2JqZWN0LT5Db25maWd1cmF0aW9uRGVwbG95KCBVc2VySUQgPT4gMSApOwoKICAgIGlmICggISREZXBsb3lSZXN1bHR7U3VjY2Vzc30gKSB7CiAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJDYW5ub3QgZGVwbG95IGNvbmZpZ3VyYXRpb24gJERlcGxveVJlc3VsdHtFcnJvcn0hIgogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIHJldHVybiAxOwp9CgoxOwo=</File>
        <File Location="Custom/Kernel/System/API/Queue.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6QVBJOjpRdWV1ZSAwLjAzOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwpubyB3YXJuaW5ncyAncmVkZWZpbmUnOwoKdXNlIHV0Zjg7Cgp1c2UgdmFycyBxdyhASVNBKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKCk7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBHZXRRdWV1ZUxpc3QgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIFdlIG5lZWQgdG8gZ2V0IFF1ZXVlcyBhcnJheSB3aXRoIGFsbCBhY2Nlc3NpYmxlIFF1ZXVlcyBhbmQgd2l0aCBldmVyeQogICAgIyBhbmNlc3RvcnMgb2Ygb25lcyBldmVuIGlmIGFuIGFnZW50IGhhcyBub3QgZ3JvdXAgcGVybWlzc2lvbnMgdG8gdGhlbS4KICAgIG15IEBRdWV1ZUFyciA9ICgpOwoKICAgICMgQWxzbyB3ZSBuZWVkIHRvIG1ha2UgUXVldWVUcmVlIGZvciB0aGVtLgogICAgbXkgQFF1ZXVlVHJlZSA9ICgpOwoKICAgIG15ICRSZXN1bHQ7CiAgICBteSAkUXVldWVPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6UXVldWUnKTsKCiAgICAjIEdldCBhbGwgcG9zc2libGUgdmFsaWQgcXVldWVzIGZyb20gT1RSUy4KICAgICMgJFZBUjEgPSB7CiAgICAjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JvdXAgbmFtZSAgICAgUk8KICAgICMgICAgJzEnID0+ICdQb3N0bWFzdGVyJywgICAgICAjIHBvc3RtYXN0ZXIgICAxCiAgICAjICAgICc0JyA9PiAnTWlzYycsICAgICAgICAgICAgIyB1c2VycyAgICAgICAgMAogICAgIyAgICAnMycgPT4gJ0p1bmsnLCAgICAgICAgICAgICMgdXNlcnMgICAgICAgIDAKICAgICMgICAgJzInID0+ICdSYXcnLCAgICAgICAgICAgICAjIHVzZXJzICAgICAgICAwIDwtLS0gbXVzdCBiZSBpbiB0aGUgcmVzdWx0IGxpc3QKICAgICMgICAgJzUnID0+ICdSYXc6OlJhd19DaGlsZCcgICAjIHN0YXRzICAgICAgICAxCiAgICAjIH07CiAgICBteSAlQWxsUXVldWVzID0gJFF1ZXVlT2JqZWN0LT5RdWV1ZUxpc3QoIFZhbGlkID0+IDEgKTsKCiAgICAjIFJldmVyc2UgdGhlIHRha2VuIGhhc2ggaW4gb3JkZXIgdG8gZ2V0IGFjY2VzcyB0byBhIHF1ZXVlIGJ5IGl0cyBRdWV1ZSBuYW1lCiAgICBteSAlUXVldWVzUmV2ZXJzZSA9IHJldmVyc2UgJUFsbFF1ZXVlczsKCiAgICAjIFBlcm1pc3Npb25zOiBSTywgUlcKICAgIG15ICVVc2VyUXVldWVzID0gJFF1ZXVlT2JqZWN0LT5HZXRBbGxRdWV1ZXMoIFVzZXJJRCA9PiAkUGFyYW17VXNlcklEfSApOwoKICAgICMgUGVybWlzc2lvbnM6IENSRUFURQogICAgaWYgKCAkUGFyYW17Rm9yQ3JlYXRlVGlja2V0fSApIHsKICAgICAgICBteSAlVXNlclF1ZXVlc1R5cGVDcmVhdGUgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6UXVldWUnKQogICAgICAgICAgLT5HZXRBbGxRdWV1ZXMoIFVzZXJJRCA9PiAkUGFyYW17VXNlcklEfSwgVHlwZSA9PiAnY3JlYXRlJyApOwoKICAgICAgICAlVXNlclF1ZXVlcyA9ICggJVVzZXJRdWV1ZXMsICVVc2VyUXVldWVzVHlwZUNyZWF0ZSApOwogICAgfQoKICAgICMgTU9WRV9JTlRPCiAgICBpZiAoICRQYXJhbXtGb3JVcGRhdGVRdWV1ZX0gKSB7CiAgICAgICAgbXkgJVVzZXJRdWV1ZXNUeXBlQ3JlYXRlID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlF1ZXVlJykKICAgICAgICAgIC0+R2V0QWxsUXVldWVzKCBVc2VySUQgPT4gJFBhcmFte1VzZXJJRH0sIFR5cGUgPT4gJ21vdmVfaW50bycgKTsKCiAgICAgICAgJVVzZXJRdWV1ZXMgPSAoICVVc2VyUXVldWVzLCAlVXNlclF1ZXVlc1R5cGVDcmVhdGUgKTsKICAgIH0KCiAgICBteSAkVHJlZSAgICAgICAgPSBbXTsKICAgIG15ICVRdWV1ZUNoaWxkcyA9ICgpOwoKICAgICMgTWFrZSBUcmVlIGZvciBldmVyeSB2YWxpZCBRdWV1ZQogICAgZm9yIG15ICRRdWV1ZSAoIHNvcnQga2V5cyAlUXVldWVzUmV2ZXJzZSApIHsKCiAgICAgICAgbXkgQFN1YlF1ZXVlcyA9IHNwbGl0ICc6OicsICRRdWV1ZTsKCiAgICAgICAgaWYgKCBAU3ViUXVldWVzID09IDEgKSB7CiAgICAgICAgICAgIHB1c2ggQHskVHJlZX0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTmFtZSAgICAgICA9PiAkU3ViUXVldWVzWy0xXSwKICAgICAgICAgICAgICAgIEZ1bGxOYW1lICAgPT4gJFF1ZXVlLAogICAgICAgICAgICAgICAgQ2hpbGRzICAgICA9PiBbXSwKICAgICAgICAgICAgICAgIElEICAgICAgICAgPT4gJFF1ZXVlc1JldmVyc2V7JFF1ZXVlfSwKICAgICAgICAgICAgICAgIEFjY2Vzc2libGUgPT4gJFVzZXJRdWV1ZXN7ICRRdWV1ZXNSZXZlcnNleyRRdWV1ZX0gfSA/IDEgOiAwCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgJFF1ZXVlQ2hpbGRzeyRRdWV1ZX0gPSAkVHJlZS0+Wy0xXXtDaGlsZHN9OwogICAgICAgICAgICBuZXh0OwogICAgICAgIH0KCiAgICAgICAgbXkgJFBhcmVudCA9IGpvaW4gJzo6JywgQFN1YlF1ZXVlc1sgMCAuLiAkI1N1YlF1ZXVlcyAtIDEgXTsKICAgICAgICBwdXNoIEB7ICRRdWV1ZUNoaWxkc3skUGFyZW50fSB9LAogICAgICAgICAgewogICAgICAgICAgICBOYW1lICAgICAgID0+ICRTdWJRdWV1ZXNbLTFdLAogICAgICAgICAgICBGdWxsTmFtZSAgID0+ICRRdWV1ZSwKICAgICAgICAgICAgQ2hpbGRzICAgICA9PiBbXSwKICAgICAgICAgICAgSUQgICAgICAgICA9PiAkUXVldWVzUmV2ZXJzZXskUXVldWV9LAogICAgICAgICAgICBBY2Nlc3NpYmxlID0+ICRVc2VyUXVldWVzeyAkUXVldWVzUmV2ZXJzZXskUXVldWV9IH0gPyAxIDogMAogICAgICAgICAgfTsKICAgICAgICAkUXVldWVDaGlsZHN7JFF1ZXVlfSA9ICRRdWV1ZUNoaWxkc3skUGFyZW50fS0+Wy0xXXtDaGlsZHN9OwogICAgfQoKICAgICMgVHJhdmVyc2UgdGhlIHRha2VuIHRyZWUgYW5kIHJlbW92ZSBhbGwgbm90IGFjY2Vzc2libGUgbm9kZXMgYW5kCiAgICAjIHRoZWlyIG5vdCBhY2Nlc3NpYmxlIHBhcmVudCBub2RlcywgZ2V0dGluZyBhIG5ldyBAUXVldWVUcmVlIGFuZAogICAgIyBAUXVldWVBcnIuIEFsbCBRdWV1ZXMgaGFzIGFkZGl0aW9uYWwgZmllbGQgQWNjZXNzaWJsZSAxfDAKICAgIGZvciBteSAkTm9kZSAoIEB7JFRyZWV9ICkgewoKICAgICAgICAjIEFkZCBjaGlsZCB3aGljaCBpcyBhY2Nlc3NpYmxlIG9yIGhhcyBhY2Nlc3NpYmxlIG9uZXMKICAgICAgICAkU2VsZi0+X1RyYXZlcnNlVHJlZSggJE5vZGUsIFxAUXVldWVUcmVlLCBcQFF1ZXVlQXJyICk7CiAgICB9CgogICAgJFJlc3VsdCA9IHsKICAgICAgICBSZXNwb25zZSAgPT4gIk9LIiwKICAgICAgICBRdWV1ZXMgICAgPT4gXEBRdWV1ZUFyciwKICAgICAgICBRdWV1ZVRyZWUgPT4gXEBRdWV1ZVRyZWUKICAgIH07CgogICAgcmV0dXJuICRSZXN1bHQ7Cn0KCnN1YiBfSGFzQWNjZXNzaWJsZUNoaWxkIHsKICAgIG15ICggJFNlbGYsICROb2RlICkgPSBAXzsKCiAgICBmb3IgbXkgJENoaWxkICggQHsgJE5vZGUtPntDaGlsZHN9IH0gKSB7CiAgICAgICAgcmV0dXJuICRDaGlsZC0+e0FjY2Vzc2libGV9ID8gMSA6ICRTZWxmLT5fSGFzQWNjZXNzaWJsZUNoaWxkKCRDaGlsZCk7CiAgICB9CgogICAgcmV0dXJuOwp9CgpzdWIgX1RyYXZlcnNlVHJlZSB7CiAgICBteSAoICRTZWxmLCAkTm9kZSwgJE5ld1RyZWUsICRRdWV1ZUFyciApID0gQF87CgogICAgbXkgJENoaWxkQ291bnQgPSBAeyAkTm9kZS0+e0NoaWxkc30gfTsKCiAgICBteSAkQXRMZWFzdE9uZSA9ICRTZWxmLT5fSGFzQWNjZXNzaWJsZUNoaWxkKCAkTm9kZSApOwoKICAgIGlmICggJE5vZGUtPntBY2Nlc3NpYmxlfSBvciAkQXRMZWFzdE9uZSApIHsKICAgICAgICBwdXNoIEB7JE5ld1RyZWV9LAogICAgICAgICAgewogICAgICAgICAgICBOYW1lICAgICAgID0+ICROb2RlLT57TmFtZX0sCiAgICAgICAgICAgIEZ1bGxOYW1lICAgPT4gJE5vZGUtPntGdWxsTmFtZX0sCiAgICAgICAgICAgIENoaWxkcyAgICAgPT4gW10sCiAgICAgICAgICAgIElEICAgICAgICAgPT4gJE5vZGUtPntJRH0sCiAgICAgICAgICAgIEFjY2Vzc2libGUgPT4gJE5vZGUtPntBY2Nlc3NpYmxlfQogICAgICAgICAgfTsKICAgICAgICAkTmV3VHJlZSA9ICROZXdUcmVlLT5bLTFde0NoaWxkc307CgogICAgICAgICMgRm9yIGNvbW1vbiBhcnJheSBvZiBuZWNlc3NhcnkgcXVldWVzCiAgICAgICAgcHVzaCBAeyRRdWV1ZUFycn0sCiAgICAgICAgICB7CiAgICAgICAgICAgIElEICAgICAgICAgPT4gJE5vZGUtPntJRH0sCiAgICAgICAgICAgIE5hbWUgICAgICAgPT4gJE5vZGUtPntOYW1lfSwKICAgICAgICAgICAgRnVsbE5hbWUgICA9PiAkTm9kZS0+e0Z1bGxOYW1lfSwKICAgICAgICAgICAgQWNjZXNzaWJsZSA9PiAkTm9kZS0+e0FjY2Vzc2libGV9CiAgICAgICAgICB9OwogICAgfQoKICAgIGZvciBteSAkQ2hpbGQgKCBAeyAkTm9kZS0+e0NoaWxkc30gfSApIHsKICAgICAgICAkU2VsZi0+X1RyYXZlcnNlVHJlZSggJENoaWxkLCAkTmV3VHJlZSwgJFF1ZXVlQXJyICk7CiAgICB9Cn0KCjE7CgpfX0VORF9fCgo9aGVhZDEgTUVUSE9EUwoKPW92ZXIKCj1pdGVtIEdldFF1ZXVlTGlzdAoKR2V0IHF1ZXVlIGxpc3QgZm9yIGEgZGVmaW5lZCB1c2VyLgoKICAgIG15ICRRdWV1ZXNJbmZvID0gQVBJUXVldWVPYmplY3QtPkdldFF1ZXVlTGlzdCgKICAgICAgICBGb3JDcmVhdGVUaWNrZXQgPT4gMXwwICAgIyBvcHRpb25hbAogICAgICAgIFVzZXJJRCAgICAgICAgICA9PiAkVXNlcklECiAgICApOwoKSXQgcmV0dXJucyBRdWV1ZXMgZm9yIEdyb3VwcyB3aXRoIFJPIG9yIFJXIHBlcm1pc3Npb25zLgoKSWYgQzxGb3JDcmVhdGVUaWNrZXQ+IGlzIHBhc3NlZCB0aGVuIFF1ZXVlcyBmcm9tIEdyb3VwcyB3aXRoIENSRUFURQpwZXJtaXNzaW9uIGFsc28gd2lsbCBiZSByZXR1cm5lZC4KClJldHVybnM6CgogICAgewogICAgICAgICJRdWV1ZXMiOiBbewogICAgICAgICAgICAiSUQiOiA1LAogICAgICAgICAgICAiTmFtZSI6ICJNYW5hZ2VtZW50IFF1ZXVlIgogICAgICAgICAgICAiRnVsbE5hbWUiOiAiTWFuYWdlbWVudCBRdWV1ZSIKICAgICAgICB9XSwKICAgICAgICAiUXVldWVUcmVlIjogW3sKICAgICAgICAgICAgIklEIjogNSwKICAgICAgICAgICAgIkNoaWxkcyI6IFtdLAogICAgICAgICAgICAiTmFtZSI6ICJNYW5hZ2VtZW50IFF1ZXVlIiwKICAgICAgICAgICAgIkZ1bGxOYW1lIjogIk1hbmFnZW1lbnQgUXVldWUiCiAgICAgICAgfV0sCiAgICAgICAgUmVzcG9uc2UgID0+ICRSZXNwb25zZSwKICAgIH0KCj1iYWNrCg==</File>
        <File Location="Custom/Kernel/System/API/Setting.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6QVBJOjpTZXR0aW5nOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwpubyB3YXJuaW5ncyAncmVkZWZpbmUnOwoKdXNlIHV0Zjg7Cgp1c2UgdmFycyBxdyhASVNBKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKCk7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAkU2VsZi0+e0RCT2JqZWN0fSAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkRCJyk7CiAgICAkU2VsZi0+e1V0aWxPYmplY3R9ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6VXRpbCcpOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIEdldExhbmd1YWdlTGlzdCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwogICAgCiAgICBteSAkUmVzdWx0OwoKICAgIG15ICRDb25maWdPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpOwoKICAgIG15ICVEZWZhdWx0VXNlZExhbmd1YWdlcyA9ICV7ICRDb25maWdPYmplY3QtPkdldCgnRGVmYXVsdFVzZWRMYW5ndWFnZXMnKSB8fCB7fSB9OwogICAgbXkgJURlZmF1bHRVc2VkTGFuZ3VhZ2VzTmF0aXZlID0gJXsgJENvbmZpZ09iamVjdC0+R2V0KCdEZWZhdWx0VXNlZExhbmd1YWdlc05hdGl2ZScpIHx8IHt9IH07CgogICAgbXkgJUxhbmd1YWdlczsKICAgIExBTkdVQUdFSUQ6CiAgICBmb3IgbXkgJExhbmd1YWdlSUQgKCBzb3J0IGtleXMgJURlZmF1bHRVc2VkTGFuZ3VhZ2VzICkgewoKICAgICAgICAjIG5leHQgbGFuZ3VhZ2UgaWYgdGhlcmUgaXMgbm90IHNldCBhbnkgbmFtZSBmb3IgY3VycmVudCBsYW5ndWFnZQogICAgICAgIGlmICggISREZWZhdWx0VXNlZExhbmd1YWdlc3skTGFuZ3VhZ2VJRH0gJiYgISREZWZhdWx0VXNlZExhbmd1YWdlc05hdGl2ZXskTGFuZ3VhZ2VJRH0gKSB7CiAgICAgICAgICAgIG5leHQgTEFOR1VBR0VJRDsKICAgICAgICB9CgogICAgICAgICMgZ2V0IHRleHRzIGluIG5hdGl2ZSBhbmQgZGVmYXVsdCBsYW5ndWFnZQogICAgICAgIG15ICRUZXh0ICAgICAgICA9ICREZWZhdWx0VXNlZExhbmd1YWdlc05hdGl2ZXskTGFuZ3VhZ2VJRH0gfHwgJyc7CiAgICAgICAgbXkgJFRleHRFbmdsaXNoID0gJERlZmF1bHRVc2VkTGFuZ3VhZ2VzeyRMYW5ndWFnZUlEfSAgICAgICB8fCAnJzsKCiAgICAgICAgIyB0cmFuc2xhdGUgdG8gY3VycmVudCB1c2VyJ3MgbGFuZ3VhZ2UKICAgICAgICBteSAkVGV4dFRyYW5zbGF0ZWQgPQogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0JyktPntMYW5ndWFnZU9iamVjdH0tPlRyYW5zbGF0ZSgkVGV4dEVuZ2xpc2gpOwoKICAgICAgICBpZiAoICRUZXh0VHJhbnNsYXRlZCAmJiAkVGV4dFRyYW5zbGF0ZWQgbmUgJFRleHQgKSB7CiAgICAgICAgICAgICRUZXh0IC49ICcgLSAnIC4gJFRleHRUcmFuc2xhdGVkOwogICAgICAgIH0KCiAgICAgICAgIyBuZXh0IGxhbmd1YWdlIGlmIHRoZXJlIGlzIG5vdCBzZXQgRW5nbGlzaCBub3IgbmF0aXZlIG5hbWUgb2YgbGFuZ3VhZ2UuCiAgICAgICAgbmV4dCBMQU5HVUFHRUlEIGlmICEkVGV4dDsKCiAgICAgICAgJExhbmd1YWdlc3skTGFuZ3VhZ2VJRH0gPSAkVGV4dDsKICAgIH0gICAgICAgIAoKICAgIG15IEBMYW5ndWFnZXMgPSBtYXAgeyB7IElEID0+ICRfLCBOYW1lID0+ICRMYW5ndWFnZXN7JF99IH0gfSBrZXlzICVMYW5ndWFnZXM7CgogICAgJFJlc3VsdCA9IHsKICAgICAgICBSZXNwb25zZSAgPT4gIk9LIiwKICAgICAgICBMYW5ndWFnZXMgPT4gXEBMYW5ndWFnZXMKICAgIH07CgogICAgcmV0dXJuICRSZXN1bHQ7Cn0KCnN1YiBVcGRhdGVGYWlsZWROb3RpZmljYXRpb25Db3VudCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhJFNlbGYtPntVdGlsT2JqZWN0fS0+SXNNb2JpbGVQYWNrYWdlSW5zdGFsbGVkOwoKICAgIG15ICRSb3dzID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkRCJyktPlNlbGVjdEFsbCgKICAgICAgICBTUUwgICA9PiBxcXsKICAgICAgICAgICAgU0VMRUNUIGZhaWxlZF9jb3VudCwgdG9rZW4sIGFkZGVkX2RhdGUsIHVzZXJfaWQKICAgICAgICAgICAgRlJPTSBSU191c2VyX3B1c2hfdG9rZW4KICAgICAgICAgICAgV0hFUkUgdG9rZW4gPSA/CiAgICAgICAgfSwKICAgICAgICBCaW5kICA9PiBbIFwkUGFyYW17VG9rZW59IF0sCiAgICAgICAgTGltaXQgPT4gMQogICAgKSAvLyBbXTsKCiAgICByZXR1cm4gdW5sZXNzIEB7ICRSb3dzIH07CgogICAgbXkgJEZhaWxlZENvdW50ID0gJFJvd3MtPlswXVswXTsKICAgICRGYWlsZWRDb3VudCsrOwoKICAgICMg0KLQvtC60LXQvSDRg9C20LUg0L3QtSDRgtC+0YDRggogICAgaWYgKCAkRmFpbGVkQ291bnQgPj0gMyApIHsKICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6REInKS0+RG8oCiAgICAgICAgICAgIFNRTCAgPT4gcXF7CiAgICAgICAgICAgICAgICBERUxFVEUgRlJPTSBSU191c2VyX3B1c2hfdG9rZW4KICAgICAgICAgICAgICAgIFdIRVJFIHRva2VuID0gPwogICAgICAgICAgICB9LAogICAgICAgICAgICBCaW5kID0+IFsgXCRQYXJhbXtUb2tlbn0gXQogICAgICAgICk7CgogICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiUHVzaFRva2VuICckUm93cy0+WzBdWzFdJywgIgogICAgICAgICAgICAgICAgLiJhZGRlZCAnJFJvd3MtPlswXVsyXScgZm9yIFVzZXJJRCAiCiAgICAgICAgICAgICAgICAuIickUm93cy0+WzBdWzNdJyB3YXMgcmVtb3ZlZCBhcyBpbnZhbGlkISIKICAgICAgICApOwoKICAgIH0gZWxzZSB7CgogICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpEQicpLT5EbygKICAgICAgICAgICAgU1FMICA9PiBxcXsKICAgICAgICAgICAgICAgIFVQREFURSBSU191c2VyX3B1c2hfdG9rZW4KICAgICAgICAgICAgICAgIFNFVCBmYWlsZWRfY291bnQgPSA/CiAgICAgICAgICAgICAgICBXSEVSRSB0b2tlbiA9ID8KICAgICAgICAgICAgfSwKICAgICAgICAgICAgQmluZCA9PiBbIFwkRmFpbGVkQ291bnQsIFwkUGFyYW17VG9rZW59IF0KICAgICAgICApOwogICAgfQoKICAgIHJldHVybjsKfQoKc3ViIFNldFB1c2hOb3RpZmljYXRpb25Ub2tlbiB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIGlmICggISRTZWxmLT57VXRpbE9iamVjdH0tPklzTW9iaWxlUGFja2FnZUluc3RhbGxlZCApIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBSZXNwb25zZSA9PiAiRVJST1IiLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiUlM0T1RSU19Nb2JpbGUgcGFja2FnZSBtdXN0IGJlIGluc3RhbGxlZCEiCiAgICAgICAgfTsKICAgIH0KCiAgICBpZiAoICEkUGFyYW17VG9rZW59ICkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIFJlc3BvbnNlID0+ICJFUlJPUiIsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJUb2tlbiBjYW5ub3QgYmUgZW1wdHkiCiAgICAgICAgfTsKICAgIH0KICAgIAogICAgJFNlbGYtPntEQk9iamVjdH0tPkRvKAogICAgICAgIFNRTCAgPT4gJ0RFTEVURSBGUk9NIFJTX3VzZXJfcHVzaF90b2tlbiBXSEVSRSB1c2VyX2lkID0gPycsCiAgICAgICAgQmluZCA9PiBbIFwkUGFyYW17VXNlcklEfSBdCiAgICApOwoKICAgICRTZWxmLT57REJPYmplY3R9LT5EbygKICAgICAgICBTUUwgPT4gcXF7CiAgICAgICAgICAgIElOU0VSVCBJTlRPIFJTX3VzZXJfcHVzaF90b2tlbiAodXNlcl9pZCwgdG9rZW4sIGFkZGVkX2RhdGUsIGFkZGVkX2J5KQogICAgICAgICAgICBWQUxVRVMgKD8sID8sIGN1cnJlbnRfdGltZXN0YW1wLCAxKQogICAgICAgIH0sCiAgICAgICAgQmluZCA9PiBbIFwkUGFyYW17VXNlcklEfSwgXCRQYXJhbXtUb2tlbn0gXQogICAgKTsKCiAgICByZXR1cm4gewogICAgICAgIFJlc3BvbnNlID0+ICJPSyIKICAgIH07Cn0KCjE7Cg==</File>
        <File Location="Custom/Kernel/System/API/Util.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6QVBJOjpVdGlsOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwpubyB3YXJuaW5ncyAncmVkZWZpbmUnOwoKdXNlIHV0Zjg7Cgp1c2UgRGF0ZTo6UGFyc2U7Cgp1c2UgdmFycyBxdyhASVNBKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKCk7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAkU2VsZi0+e0xheW91dE9iamVjdH0gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CiAgICAkU2VsZi0+e0NvbmZpZ09iamVjdH0gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIENsZWFuSlNPTiB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRKU09OID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5KU09ORW5jb2RlKCBEYXRhID0+ICRQYXJhbXsgRGF0YSB9KTsKICAgIG15ICROdW1iZXJGaWVsZHMgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpCiAgICAgIC0+R2V0KCdSUzo6QVBJOjpPYmplY3RUeXBlJyktPntOdW1iZXJ9OwoKICAgIG15ICROdW1zU3RyID0gam9pbiAnfCcsIEB7ICROdW1iZXJGaWVsZHMgfTsKCiAgICAkSlNPTiA9fiBzLygiKCROdW1zU3RyKSJccyo6XHMqKSIoXC0/XGQrXC4/XGQqKSIvJDEkMy94ZzsKCiAgICByZXR1cm4gJEpTT047Cn0KCiMg0J/QvtC70YPRh9C40YLRjCDRgtC+0LrQtdC9INC00LvRjyDQvtGC0L/RgNCw0LLQutC4INGD0LLQtdC00L7QvNC70LXQvdC40Lkg0L3QsCDQvNC+0LHQuNC70YzQvdC+0LUg0L/RgNC40LvQvtC20LXQvdC40LUKc3ViIEdldFVzZXJUb2tlbiB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiB1bmxlc3MgZGVmaW5lZCAkUGFyYW17VXNlcklEfTsKCiAgICByZXR1cm4gaWYgISRTZWxmLT5Jc01vYmlsZVBhY2thZ2VJbnN0YWxsZWQ7CgogICAgbXkgJFRva2VuUm93cyA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpEQicpLT5TZWxlY3RBbGwoCiAgICAgICAgU1FMID0+IHFxewogICAgICAgICAgICBTRUxFQ1QgdG9rZW4KICAgICAgICAgICAgRlJPTSBSU191c2VyX3B1c2hfdG9rZW4KICAgICAgICAgICAgV0hFUkUgdXNlcl9pZCA9ID8KICAgICAgICB9LAogICAgICAgIEJpbmQgPT4gWyBcJFBhcmFte1VzZXJJRH0gXQogICAgKSAvLyBbXTsKCiAgICBpZiAoIEB7ICRUb2tlblJvd3MgfSApIHsKICAgICAgICByZXR1cm4gJFRva2VuUm93cy0+WzBdWzBdOwogICAgfQoKICAgIHJldHVybjsKfQoKc3ViIElzTW9iaWxlUGFja2FnZUluc3RhbGxlZCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRDYWNoZU9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDYWNoZScpOwoKICAgIG15ICRDYWNoZVJlc3VsdCA9ICRDYWNoZU9iamVjdC0+R2V0KAogICAgICAgIFR5cGUgPT4gJ01vYmlsZScsCiAgICAgICAgS2V5ICAgPT4gJ0lzTW9iaWxlUGFja2FnZUluc3RhbGxlZCcKICAgICk7CgogICAgcmV0dXJuICRDYWNoZVJlc3VsdCBpZiAkQ2FjaGVSZXN1bHQ7CgogICAgbXkgJElzSW5zdGFsbGVkID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlBhY2thZ2UnKS0+UGFja2FnZUlzSW5zdGFsbGVkKAogICAgICAgIE5hbWUgICA9PiAnUlM0T1RSU19Nb2JpbGUnCiAgICApOwoKICAgICRDYWNoZU9iamVjdC0+U2V0KAogICAgICAgIFR5cGUgID0+ICdNb2JpbGUnLAogICAgICAgIEtleSAgID0+ICdJc01vYmlsZVBhY2thZ2VJbnN0YWxsZWQnLAogICAgICAgIFZhbHVlID0+ICRJc0luc3RhbGxlZCwKICAgICAgICBUVEwgICA9PiA2MCAqIDYwICogMjQgKiAzMCwgIyAzMCDQtNC90LXQuQogICAgKTsKCiAgICByZXR1cm4gJElzSW5zdGFsbGVkOwp9CgpzdWIgSXNBZHZhbmNlZFRpY2tldFNlYXJjaEluc3RhbGxlZCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRDYWNoZU9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDYWNoZScpOwoKICAgIG15ICRDYWNoZVJlc3VsdCA9ICRDYWNoZU9iamVjdC0+R2V0KAogICAgICAgIFR5cGUgPT4gJ0FQSScsCiAgICAgICAgS2V5ICAgPT4gJ0lzQWR2YW5jZWRUaWNrZXRTZWFyY2hJbnN0YWxsZWQnCiAgICApOwoKICAgIHJldHVybiAkQ2FjaGVSZXN1bHQgaWYgJENhY2hlUmVzdWx0OwoKICAgIG15IEBQYWNrYWdlTGlzdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpQYWNrYWdlJykKICAgICAgLT5SZXBvc2l0b3J5TGlzdCggUmVzdWx0ID0+ICdzaG9ydCcgKTsKCiAgICBteSAkSXNJbnN0YWxsZWQgPSAwOwogICAgZm9yIG15ICRQYWNrYWdlIChAUGFja2FnZUxpc3QpIHsKICAgICAgICBpZiAoICAgICRQYWNrYWdlLT57TmFtZX0gZXEgJ1JTNE9UUlNfQWR2YW5jZWRUaWNrZXRTZWFyY2gnCiAgICAgICAgICAgIGFuZCAkUGFja2FnZS0+e1N0YXR1c30gZXEgJ2luc3RhbGxlZCcKICAgICAgICAgICAgYW5kIHZlcnNpb24tPnBhcnNlKCAkUGFja2FnZS0+e1ZlcnNpb259ICkgPj0gdmVyc2lvbi0+cGFyc2UoJzYuMS4yNCcpICkKICAgICAgICB7CiAgICAgICAgICAgICRJc0luc3RhbGxlZCA9IDE7CiAgICAgICAgfQogICAgfQoKICAgICRDYWNoZU9iamVjdC0+U2V0KAogICAgICAgIFR5cGUgID0+ICdBUEknLAogICAgICAgIEtleSAgID0+ICdJc0FkdmFuY2VkVGlja2V0U2VhcmNoSW5zdGFsbGVkJywKICAgICAgICBWYWx1ZSA9PiAkSXNJbnN0YWxsZWQsCiAgICAgICAgVFRMICAgPT4gNjAgKiA2MCAqIDI0ICogMzAsICMgMzAg0LTQvdC10LkKICAgICk7CgogICAgcmV0dXJuICRJc0luc3RhbGxlZDsKfQoKMTsK</File>
        <File Location="Custom/Kernel/System/API/Service.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6QVBJOjpTZXJ2aWNlOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwpubyB3YXJuaW5ncyAncmVkZWZpbmUnOwoKdXNlIHV0Zjg7Cgp1c2UgdmFycyBxdyhASVNBKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKCk7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBHZXRTZXJ2aWNlTGlzdCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwogICAgCiAgICBteSAkUmVzdWx0OwoKICAgIG15ICVTZXJ2aWNlTGlzdDsKCiAgICBteSBAU2VydmljZUFyciAgPSAoKTsKICAgIG15IEBTZXJ2aWNlVHJlZSA9ICgpOwoKICAgIGlmICggJFBhcmFteyBDdXN0b21lclVzZXJMb2dpbiB9ICkgewogICAgICAgIG15ICRUcmVlICAgICAgICA9IFtdOwogICAgICAgIG15ICVTZXJ2aWNlQ2hpbGRzID0gKCk7CgogICAgICAgIG15ICVTZXJ2aWNlcyA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTZXJ2aWNlJyktPlNlcnZpY2VMaXN0KAogICAgICAgICAgICBVc2VySUQgPT4gJFBhcmFte1VzZXJJRH0KICAgICAgICApOwoKICAgICAgICAlU2VydmljZUxpc3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2VydmljZScpLT5DdXN0b21lclVzZXJTZXJ2aWNlTWVtYmVyTGlzdCgKICAgICAgICAgICAgQ3VzdG9tZXJVc2VyTG9naW4gPT4gJFBhcmFteyBDdXN0b21lclVzZXJMb2dpbiB9LAogICAgICAgICAgICBSZXN1bHQgICAgICAgICAgICA9PiAnSEFTSCcsCiAgICAgICAgICAgIERlZmF1bHRTZXJ2aWNlcyAgID0+IDEKICAgICAgICApOwoKICAgICAgICBteSAlU2VydmljZXNSZXZlcnNlID0gcmV2ZXJzZSAlU2VydmljZXM7CgogICAgICAgIGZvciBteSAkU2VydmljZSAoIHNvcnQga2V5cyAlU2VydmljZXNSZXZlcnNlICkgewogICAgICAgICAgICBteSBAU3ViU2VydmljZXMgPSBzcGxpdCAnOjonLCAkU2VydmljZTsKCiAgICAgICAgICAgIGlmICggQFN1YlNlcnZpY2VzID09IDEgKSB7CiAgICAgICAgICAgICAgICBwdXNoIEB7JFRyZWV9LAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgTmFtZSAgICAgICA9PiAkU3ViU2VydmljZXNbLTFdLAogICAgICAgICAgICAgICAgICAgIEZ1bGxOYW1lICAgPT4gJFNlcnZpY2UsCiAgICAgICAgICAgICAgICAgICAgQ2hpbGRzICAgICA9PiBbXSwKICAgICAgICAgICAgICAgICAgICBJRCAgICAgICAgID0+ICRTZXJ2aWNlc1JldmVyc2V7JFNlcnZpY2V9LAogICAgICAgICAgICAgICAgICAgIEFjY2Vzc2libGUgPT4gJFNlcnZpY2VMaXN0eyAkU2VydmljZXNSZXZlcnNleyRTZXJ2aWNlfSB9ID8gMSA6IDAKICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAkU2VydmljZUNoaWxkc3skU2VydmljZX0gPSAkVHJlZS0+Wy0xXXtDaGlsZHN9OwogICAgICAgICAgICAgICAgbmV4dDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbXkgJFBhcmVudCA9IGpvaW4gJzo6JywgQFN1YlNlcnZpY2VzWyAwIC4uICQjU3ViU2VydmljZXMgLSAxIF07CiAgICAgICAgICAgIHB1c2ggQHsgJFNlcnZpY2VDaGlsZHN7JFBhcmVudH0gfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBOYW1lICAgICAgID0+ICRTdWJTZXJ2aWNlc1stMV0sCiAgICAgICAgICAgICAgICBGdWxsTmFtZSAgID0+ICRTZXJ2aWNlLAogICAgICAgICAgICAgICAgQ2hpbGRzICAgICA9PiBbXSwKICAgICAgICAgICAgICAgIElEICAgICAgICAgPT4gJFNlcnZpY2VzUmV2ZXJzZXskU2VydmljZX0sCiAgICAgICAgICAgICAgICBBY2Nlc3NpYmxlID0+ICRTZXJ2aWNlTGlzdHsgJFNlcnZpY2VzUmV2ZXJzZXskU2VydmljZX0gfSA/IDEgOiAwCiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICRTZXJ2aWNlQ2hpbGRzeyRTZXJ2aWNlfSA9ICRTZXJ2aWNlQ2hpbGRzeyRQYXJlbnR9LT5bLTFde0NoaWxkc307CiAgICAgICAgfQoKICAgICAgICBmb3IgbXkgJE5vZGUgKCBAeyRUcmVlfSApIHsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6UXVldWUnKQogICAgICAgICAgICAgIC0+X1RyYXZlcnNlVHJlZSggJE5vZGUsIFxAU2VydmljZVRyZWUsIFxAU2VydmljZUFyciApOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgUmVzcG9uc2UgID0+ICJPSyIsCiAgICAgICAgICAgIFNlcnZpY2VzICAgID0+IFxAU2VydmljZUFyciwKICAgICAgICAgICAgU2VydmljZVRyZWUgPT4gXEBTZXJ2aWNlVHJlZQogICAgICAgIH07CgogICAgfSBlbHNlIHsKCiAgICAgICAgJVNlcnZpY2VMaXN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlNlcnZpY2UnKS0+U2VydmljZUxpc3QoCiAgICAgICAgICAgIFVzZXJJRCA9PiAkUGFyYW17VXNlcklEfQogICAgICAgICk7CiAgICB9CgogICAgbXkgQFNlcnZpY2VzID0gbWFwIHsKICAgICAgICB7IElEID0+ICRfLCBUaXRsZSA9PiAkU2VydmljZUxpc3R7JF99ICB9CiAgICB9IGtleXMgJVNlcnZpY2VMaXN0OwoKICAgICRSZXN1bHQgPSB7CiAgICAgICAgUmVzcG9uc2UgPT4gIk9LIiwKICAgICAgICBTZXJ2aWNlcyA9PiBcQFNlcnZpY2VzCiAgICB9OwoKICAgIHJldHVybiAkUmVzdWx0Owp9CgoxOwo=</File>
        <File Location="Custom/Kernel/System/API/Filter.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/API/SLA.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6QVBJOjpTTEE7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cm5vIHdhcm5pbmdzICdyZWRlZmluZSc7Cgp1c2UgdXRmODsKCnVzZSB2YXJzIHF3KEBJU0EpOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoKTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIEdldFNMQUxpc3QgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKICAgIAogICAgbXkgJFJlc3VsdDsKCiAgICBteSAlU0xBTGlzdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTTEEnKS0+U0xBTGlzdCgKICAgICAgICAoICRQYXJhbXsgU2VydmljZUlEIH0gPwogICAgICAgICAgICAoIFNlcnZpY2VJRCA9PiAkUGFyYW17IFNlcnZpY2VJRCB9ICkgOiAoKSApLAogICAgICAgIFVzZXJJRCAgICA9PiAkUGFyYW17VXNlcklEfQogICAgKTsKCiAgICBteSBAU0xBTGlzdCA9IG1hcCB7CiAgICAgICAgeyBJRCA9PiAkXywgVGl0bGUgPT4gJFNMQUxpc3R7JF99ICB9CiAgICB9IGtleXMgJVNMQUxpc3Q7CgogICAgJFJlc3VsdCA9IHsKICAgICAgICBSZXNwb25zZSA9PiAiT0siLAogICAgICAgIFNMQUxpc3QgID0+IFxAU0xBTGlzdAogICAgfTsKCiAgICByZXR1cm4gJFJlc3VsdDsKfQoKMTsK</File>
        <File Location="Custom/Kernel/System/API/System.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6QVBJOjpTeXN0ZW07Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cm5vIHdhcm5pbmdzICdyZWRlZmluZSc7Cgp1c2UgdXRmODsKCnVzZSB2YXJzIHF3KEBJU0EpOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoKTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICRTZWxmLT57REJPYmplY3R9ICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6REInKTsKICAgICRTZWxmLT57REZPYmplY3R9ICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkJyk7CiAgICAkU2VsZi0+e1V0aWxPYmplY3R9ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkFQSTo6VXRpbCcpOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIEdldFBhY2thZ2VMaXN0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJENvbmZpZ09iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6Q29uZmlnJyk7CiAgICBteSBAUGFja2FnZXMgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6UGFja2FnZScpLT5SZXBvc2l0b3J5TGlzdCgKICAgICAgICBSZXN1bHQgPT4gJ1Nob3J0JwogICAgKTsKCiAgICBteSBAUmVzdWx0ID0gKCk7CiAgICBmb3IgbXkgJFBhY2thZ2UgKCBAUGFja2FnZXMgKSB7CiAgICAgICAgaWYgKCAkUGFja2FnZS0+e05hbWV9ID1+IC9eUlM0T1RSU18oQVBJfE1vYmlsZSkkL3ggKSB7CiAgICAgICAgICAgIGRlbGV0ZSAkUGFja2FnZS0+e01ENXN1bX07CiAgICAgICAgICAgIGRlbGV0ZSAkUGFja2FnZS0+e1N0YXR1c307CiAgICAgICAgICAgIGRlbGV0ZSAkUGFja2FnZS0+e1ZlbmRvcn07CgogICAgICAgICAgICBwdXNoIEBSZXN1bHQsICRQYWNrYWdlOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gewogICAgICAgIFJlc3BvbnNlID0+ICJPSyIsCiAgICAgICAgUGFja2FnZXMgPT4gXEBSZXN1bHQKICAgIH07Cn0KCnN1YiBHZXREeW5hbWljRmllbGRMaXN0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNjcmVlbkR5bmFtaWNGaWVsZHMgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpCiAgICAgICAgICAgICAgICAgICAgIC0+R2V0KCJSUzpBUEk6OlRpY2tldDo6TW9iaWxlU2NyZWVuOjpEeW5hbWljRmllbGRzIik7CgogICAgbXkgJExpc3QgPSAkU2VsZi0+e0RGT2JqZWN0fS0+RHluYW1pY0ZpZWxkTGlzdEdldCgpOwoKICAgIG15ICVSZXN1bHQgPSAoKTsKICAgIGZvciBteSAkRmllbGQgKCBAeyRMaXN0fSApIHsKCiAgICAgICAgbXkgJVNjcmVlbnMgPSAoKTsKICAgICAgICBmb3IgbXkgJFNjcmVlbiAoIHNvcnQga2V5cyAleyRTY3JlZW5EeW5hbWljRmllbGRzfSApIHsKICAgICAgICAgICAgaWYgKCBleGlzdHMgJFNjcmVlbkR5bmFtaWNGaWVsZHMtPnskU2NyZWVufXskRmllbGQtPntOYW1lfX0gKSB7CiAgICAgICAgICAgICAgICAkU2NyZWVuc3skU2NyZWVufSA9CiAgICAgICAgICAgICAgICAgICRTY3JlZW5EeW5hbWljRmllbGRzLT57JFNjcmVlbn17JEZpZWxkLT57TmFtZX19OwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBwdXNoIEB7ICRSZXN1bHR7ICRGaWVsZC0+e09iamVjdFR5cGV9IH0gfSwKICAgICAgICAgIHsKICAgICAgICAgICAgSUQgICAgICAgICA9PiAkRmllbGQtPntJRH0sCiAgICAgICAgICAgIE5hbWUgICAgICAgPT4gJEZpZWxkLT57TmFtZX0sCiAgICAgICAgICAgIExhYmVsICAgICAgPT4gJEZpZWxkLT57TGFiZWx9LAogICAgICAgICAgICBGaWVsZFR5cGUgID0+ICRGaWVsZC0+e0ZpZWxkVHlwZX0sCiAgICAgICAgICAgIE9iamVjdFR5cGUgPT4gJEZpZWxkLT57T2JqZWN0VHlwZX0sCiAgICAgICAgICAgIFNjcmVlbnMgICAgPT4gXCVTY3JlZW5zLAogICAgICAgICAgICBDb25maWcgICAgID0+IHsKICAgICAgICAgICAgICAgICgKICAgICAgICAgICAgICAgICAgICAkRmllbGQtPntDb25maWd9e1Bvc3NpYmxlVmFsdWVzfQogICAgICAgICAgICAgICAgICAgID8gKCBQb3NzaWJsZVZhbHVlcyA9PiAkRmllbGQtPntDb25maWd9e1Bvc3NpYmxlVmFsdWVzfSApCiAgICAgICAgICAgICAgICAgICAgOiAoKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgfQoKICAgIHJldHVybiB7CiAgICAgICAgUmVzcG9uc2UgICAgICA9PiAiT0siLAogICAgICAgIER5bmFtaWNGaWVsZHMgPT4gXCVSZXN1bHQKICAgIH07Cn0KCjE7Cg==</File>
        <File Location="Custom/Kernel/System/API/Customer.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/API/Ticket.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/API/User.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6QVBJOjpVc2VyOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwpubyB3YXJuaW5ncyAncmVkZWZpbmUnOwoKdXNlIHV0Zjg7Cgp1c2UgdmFycyBxdyhASVNBKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKCk7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAkU2VsZi0+e1VzZXJPYmplY3R9ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlVzZXInKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBHZXRVc2VyTGlzdCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwogICAgCiAgICBteSAkUmVzdWx0OwoKICAgIG15ICVVc2VycyA9ICRTZWxmLT57VXNlck9iamVjdH0tPlVzZXJMaXN0KAogICAgICAgIFR5cGUgID0+ICdTaG9ydCcsCiAgICAgICAgVmFsaWQgPT4gMSwKICAgICk7CgogICAgbXkgQFVzZXJJRHMgPSAoKTsKCiAgICBpZiAoICRQYXJhbXtRdWV1ZUlEfSApIHsKCiAgICAgICAgbXkgJEdJRCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpRdWV1ZScpCiAgICAgICAgICAgICAgICAgICAgLT5HZXRRdWV1ZUdyb3VwSUQoIFF1ZXVlSUQgPT4gJFBhcmFte1F1ZXVlSUR9ICk7CgogICAgICAgIG15ICVNZW1iZXJMaXN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06Okdyb3VwJyktPlBlcm1pc3Npb25Hcm91cEdldCgKICAgICAgICAgICAgR3JvdXBJRCA9PiAkR0lELAogICAgICAgICAgICBUeXBlICAgID0+ICdvd25lcicKICAgICAgICApOwoKICAgICAgICBAVXNlcklEcyA9IGtleXMgJU1lbWJlckxpc3Q7CgogICAgfSBlbHNpZiAoICRQYXJhbXtTZXJ2aWNlSUR9ICkgewoKICAgIH0gZWxzZSB7CgogICAgICAgIEBVc2VySURzID0ga2V5cyAlVXNlcnM7CiAgICB9CgogICAgbXkgQFVzZXJzID0gKCk7CiAgICBmb3IgbXkgJFVzZXJJRCAoQFVzZXJJRHMpIHsKICAgICAgICBteSAlVXNlciA9ICRTZWxmLT57VXNlck9iamVjdH0tPkdldFVzZXJEYXRhKCBVc2VySUQgPT4gJFVzZXJJRCApOyAgICAgICAgICAgIAogICAgICAgIGlmICggJVVzZXIgKSB7CiAgICAgICAgICAgIGZvciBteSAkRmllbGQgKAogICAgICAgICAgICAgICAgcXcvVXNlckF1dGhCYWNrZW5kIFVzZXJDcmVhdGVOZXh0TWFzawogICAgICAgICAgICAgICAgVXNlclN5c3RlbUNvbmZpZ3VyYXRpb25DYXRlZ29yeSBVc2VyVGl0bGUgVXNlck1vYmlsZS8KICAgICAgICAgICAgICApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICggZGVmaW5lZCAkVXNlcnskRmllbGR9IGFuZCAkVXNlcnskRmllbGR9IGVxICcnICkgewogICAgICAgICAgICAgICAgICAgICRVc2VyeyRGaWVsZH0gPSB1bmRlZjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcHVzaCBAVXNlcnMsIFwlVXNlcjsKICAgICAgICB9CiAgICB9CgogICAgJFJlc3VsdCA9IHsKICAgICAgICBSZXNwb25zZSA9PiAiT0siLAogICAgICAgIFVzZXJzICAgID0+IFxAVXNlcnMsCiAgICAgICAgQ291bnQgICAgPT4gc2NhbGFyIEBVc2VycwogICAgfTsKCiAgICByZXR1cm4gJFJlc3VsdDsKfQoKc3ViIEdldFVzZXJQZXJtaXNzaW9ucyB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRSZXN1bHQ7CgogICAgbXkgJEdyb3Vwc0luZm9Sb3dzID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkRCJyktPlNlbGVjdEFsbCgKICAgICAgICBTUUwgID0+IHFxewogICAgICAgICAgICBTRUxFQ1QgZ3UuZ3JvdXBfaWQsIGcubmFtZSBncm91cF9uYW1lLAogICAgICAgICAgICAgICAgICAgZ3UucGVybWlzc2lvbl9rZXksIHEuaWQgcXVldWVfaWQsCiAgICAgICAgICAgICAgICAgICBxLm5hbWUgcXVldWVfbmFtZQogICAgICAgICAgICBGUk9NIGdyb3VwX3VzZXIgZ3UKICAgICAgICAgICAgSk9JTiBncm91cHMgZwogICAgICAgICAgICAgICAgT04gZ3UuZ3JvdXBfaWQgPSBnLmlkIEFORCBndS51c2VyX2lkID0gPwogICAgICAgICAgICBMRUZUIEpPSU4gcXVldWUgcSBPTiBndS5ncm91cF9pZCA9IHEuZ3JvdXBfaWQKCiAgICAgICAgICAgIFVOSU9OCgogICAgICAgICAgICBTRUxFQ1QgZ3IuZ3JvdXBfaWQsIGcubmFtZSBncm91cF9uYW1lLAogICAgICAgICAgICAgICAgICAgZ3IucGVybWlzc2lvbl9rZXksIHEuaWQgcXVldWVfaWQsCiAgICAgICAgICAgICAgICAgICBxLm5hbWUgcXVldWVfbmFtZQogICAgICAgICAgICBGUk9NIGdyb3VwX3JvbGUgZ3IKICAgICAgICAgICAgSk9JTiByb2xlX3VzZXIgcnUgT04gZ3Iucm9sZV9pZCA9IHJ1LnJvbGVfaWQgQU5EIHJ1LnVzZXJfaWQgPSA/CiAgICAgICAgICAgIEpPSU4gZ3JvdXBzIGcKICAgICAgICAgICAgICAgIE9OIGdyLmdyb3VwX2lkID0gZy5pZAogICAgICAgICAgICBMRUZUIEpPSU4gcXVldWUgcSBPTiBnci5ncm91cF9pZCA9IHEuZ3JvdXBfaWQKICAgICAgICB9LAogICAgICAgIEJpbmQgPT4gWyBcJFBhcmFte1VzZXJJRH0sIFwkUGFyYW17VXNlcklEfSBdCiAgICApIC8vIFtdOwoKICAgIG15ICRHcm91cEluZGV4ID0gMDsKICAgIG15ICRHcm91cElER3JvdXBzSW5kZXhNYXAgPSB7fTsKCiAgICBteSAkR3JvdXBzID0gW107CiAgICBmb3IgbXkgJEdyb3VwUm93ICggQHsgJEdyb3Vwc0luZm9Sb3dzIH0gKSB7CiAgICAgICAgbXkgJEdyb3VwSUQgICAgICAgICAgPSAkR3JvdXBSb3ctPlswXTsKICAgICAgICBteSAkR3JvdXBOYW1lICAgICAgICA9ICRHcm91cFJvdy0+WzFdOwogICAgICAgIG15ICRHcm91cFBlcm1pc3Npb24gID0gJEdyb3VwUm93LT5bMl07CiAgICAgICAgbXkgJFF1ZXVlSUQgICAgICAgICAgPSAkR3JvdXBSb3ctPlszXTsKICAgICAgICBteSAkUXVldWVOYW1lICAgICAgICA9ICRHcm91cFJvdy0+WzRdOwoKICAgICAgICBteSAkR3JvdXAgPSB7CiAgICAgICAgICAgIElEICAgICA9PiAkR3JvdXBJRCwKICAgICAgICAgICAgTmFtZSAgID0+ICRHcm91cE5hbWUsCiAgICAgICAgICAgIFF1ZXVlcyA9PiBbXQogICAgICAgIH07CgogICAgICAgIG15ICRHcm91cEluZGV4SW5Hcm91cHNBcnIgPSAkR3JvdXBJREdyb3Vwc0luZGV4TWFwLT57ICRHcm91cElEIH07CiAgICAgICAgaWYgKCBkZWZpbmVkICRHcm91cEluZGV4SW5Hcm91cHNBcnIgKSB7CgogICAgICAgICAgICBteSAkRm91bmQgPSAwOwogICAgICAgICAgICBmb3IgbXkgJFBlcm0gKCBAeyAkR3JvdXBzLT5bICRHcm91cEluZGV4SW5Hcm91cHNBcnIgXS0+e1Blcm1pc3Npb25zfSB9ICkgewogICAgICAgICAgICAgICAgaWYgKCAkUGVybSBlcSAkR3JvdXBQZXJtaXNzaW9uICkgewogICAgICAgICAgICAgICAgICAgICRGb3VuZCA9IDE7CiAgICAgICAgICAgICAgICAgICAgbGFzdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCAhJEZvdW5kICkgewogICAgICAgICAgICAgICAgcHVzaCBAeyAkR3JvdXBzLT5bICRHcm91cEluZGV4SW5Hcm91cHNBcnIgXS0+e1Blcm1pc3Npb25zfSB9LAogICAgICAgICAgICAgICAgICAgICAkR3JvdXBQZXJtaXNzaW9uOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoICRRdWV1ZUlEICkgewogICAgICAgICAgICAgICAgbXkgJElzUXVldWVGb3VuZCA9IDA7CiAgICAgICAgICAgICAgICBmb3IgbXkgJFF1ZXVlICggQHsgJEdyb3Vwcy0+WyAkR3JvdXBJbmRleEluR3JvdXBzQXJyIF0tPntRdWV1ZXN9IH0gKSB7CiAgICAgICAgICAgICAgICAgICAgJElzUXVldWVGb3VuZCA9IDEgaWYgJFF1ZXVlLT57SUR9ID09ICRRdWV1ZUlEOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICggISRJc1F1ZXVlRm91bmQgKSB7CiAgICAgICAgICAgICAgICAgICAgcHVzaCBAeyAkR3JvdXBzLT5bICRHcm91cEluZGV4SW5Hcm91cHNBcnIgXS0+e1F1ZXVlc30gfSwgewogICAgICAgICAgICAgICAgICAgICAgICBJRCAgID0+ICRRdWV1ZUlELAogICAgICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICRRdWV1ZU5hbWUKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewoKICAgICAgICAgICAgaWYgKCAkUXVldWVJRCApIHsKICAgICAgICAgICAgICAgIHB1c2ggQHsgJEdyb3VwLT57UXVldWVzfSB9LCB7CiAgICAgICAgICAgICAgICAgICAgSUQgICA9PiAkUXVldWVJRCwKICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICRRdWV1ZU5hbWUKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRHcm91cC0+e1Blcm1pc3Npb25zfSA9IFsgJEdyb3VwUGVybWlzc2lvbiBdOwoKICAgICAgICAgICAgcHVzaCBAeyAkR3JvdXBzIH0sICRHcm91cDsKCiAgICAgICAgICAgICRHcm91cElER3JvdXBzSW5kZXhNYXAtPnsgJEdyb3VwSUQgfSA9ICRHcm91cEluZGV4Kys7CiAgICAgICAgfQogICAgfQoKICAgICRSZXN1bHQgPSB7CiAgICAgICAgUmVzcG9uc2UgPT4gIk9LIiwKICAgICAgICBHcm91cHMgICA9PiAkR3JvdXBzCiAgICB9OwoKICAgIHJldHVybiAkUmVzdWx0Owp9CgoxOwo=</File>
        <File Location="Custom/Kernel/System/Web/InterfaceAgentJSON.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/Language.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/Output/HTML/ZZZLayout_ChallengeTokenCheck.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE3IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMTgtMjAyMCBSYWRpYW50IFN5c3RlbSwgaHR0cDovL3JhZGlhbnRzeXN0ZW0uY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok91dHB1dDo6SFRNTDo6WlpaTGF5b3V0X0NoYWxsZW5nZVRva2VuQ2hlY2s7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlZhcmlhYmxlQ2hlY2sgcXcoSXNIYXNoUmVmV2l0aERhdGEpOwoKewogICAgbm8gd2FybmluZ3MgJ3JlZGVmaW5lJzsKCnN1YiBLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0OjpDaGFsbGVuZ2VUb2tlbkNoZWNrIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyByZXR1cm4gaWYgZmVhdHVyZSBpcyBkaXNhYmxlZAogICAgcmV0dXJuIDEgaWYgISRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6Q29uZmlnJyktPkdldCgnU2Vzc2lvbkNTUkZQcm90ZWN0aW9uJyk7CgogICAgIyBnZXQgY2hhbGxlbmdlIHRva2VuIGFuZCBjaGVjayBpdAogICAgIyBSUwogICAgbXkgJENoYWxsZW5nZVRva2VuID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcpCiAgICAgICAgLT5HZXRQYXJhbSggUGFyYW0gPT4gJ0NoYWxsZW5nZVRva2VuJyApIHx8ICRQYXJhbXtDaGFsbGVuZ2VUb2tlbn0gfHwgJyc7CgogICAgIyBjaGVjayByZWd1bGFyIENoYWxsZW5nZVRva2VuCiAgICByZXR1cm4gMSBpZiAkQ2hhbGxlbmdlVG9rZW4gZXEgJFNlbGYtPntVc2VyQ2hhbGxlbmdlVG9rZW59OwoKICAgICMgY2hlY2sgQ2hhbGxlbmdlVG9rZW4gb2YgYWxsIG93biBzZXNzaW9ucwogICAgbXkgJFNlc3Npb25PYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6QXV0aFNlc3Npb24nKTsKICAgIG15IEBTZXNzaW9ucyAgICAgID0gJFNlc3Npb25PYmplY3QtPkdldEFsbFNlc3Npb25JRHMoKTsKCiAgICBTRVNTSU9OOgogICAgZm9yIG15ICRTZXNzaW9uSUQgKEBTZXNzaW9ucykgewogICAgICAgIG15ICVEYXRhID0gJFNlc3Npb25PYmplY3QtPkdldFNlc3Npb25JRERhdGEoIFNlc3Npb25JRCA9PiAkU2Vzc2lvbklEICk7CiAgICAgICAgbmV4dCBTRVNTSU9OIGlmICEkRGF0YXtVc2VySUR9OwogICAgICAgIG5leHQgU0VTU0lPTiBpZiAkRGF0YXtVc2VySUR9IG5lICRTZWxmLT57VXNlcklEfTsKICAgICAgICBuZXh0IFNFU1NJT04gaWYgISREYXRhe1VzZXJDaGFsbGVuZ2VUb2tlbn07CgogICAgICAgICMgY2hlY2sgQ2hhbGxlbmdlVG9rZW4KICAgICAgICByZXR1cm4gMSBpZiAkQ2hhbGxlbmdlVG9rZW4gZXEgJERhdGF7VXNlckNoYWxsZW5nZVRva2VufTsKICAgIH0KCiAgICAjIFJTCiAgICBpZiAoICRQYXJhbXtTaWxlbnR9ICkgewogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjIG5vIHZhbGlkIHRva2VuIGZvdW5kCiAgICBpZiAoICRQYXJhbXtUeXBlfSAmJiBsYyAkUGFyYW17VHlwZX0gZXEgJ2N1c3RvbWVyJyApIHsKICAgICAgICAkU2VsZi0+Q3VzdG9tZXJGYXRhbEVycm9yKAogICAgICAgICAgICBNZXNzYWdlID0+ICdJbnZhbGlkIENoYWxsZW5nZSBUb2tlbiEnLAogICAgICAgICk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkU2VsZi0+RmF0YWxFcnJvcigKICAgICAgICAgICAgTWVzc2FnZSA9PiAnSW52YWxpZCBDaGFsbGVuZ2UgVG9rZW4hJywKICAgICAgICApOwogICAgfQoKICAgIHJldHVybjsKfQoKCn0KCjE7Cg==</File>
        <File Location="scripts/test/RS_API/Requests.t" Permission="644" Encode="Base64"></File>
        <File Location="bin/cgi-bin/json.pl" Permission="644" Encode="Base64">IyEvdXNyL2Jpbi9wZXJsCiMgLS0KIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNyBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgICAgICAgICAgICAgICAyMDE4LTIwMjAgUmFkaWFudCBTeXN0ZW0sIGh0dHA6Ly9yYWRpYW50c3lzdGVtLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC50eHQuCiMgLS0KCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCiMgdXNlIC4uLy4uLyBhcyBsaWIgbG9jYXRpb24KdXNlIEZpbmRCaW4gcXcoJEJpbik7CnVzZSBsaWIgIiRCaW4vLi4vLi4iOwp1c2UgbGliICIkQmluLy4uLy4uL0tlcm5lbC9jcGFuLWxpYiI7CnVzZSBsaWIgIiRCaW4vLi4vLi4vQ3VzdG9tIjsKCiMgMD1vZmY7MT1vbjsKbXkgJERlYnVnID0gMDsKCiMgbG9hZCBhZ2VudCB3ZWIgaW50ZXJmYWNlCnVzZSBLZXJuZWw6OlN5c3RlbTo6V2ViOjpJbnRlcmZhY2VBZ2VudEpTT04oKTsKdXNlIEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyOwoKbG9jYWwgJEtlcm5lbDo6T00gPSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlci0+bmV3KCk7CgpteSAkSW50ZXJmYWNlID0gS2VybmVsOjpTeXN0ZW06OldlYjo6SW50ZXJmYWNlQWdlbnRKU09OLT5uZXcoIERlYnVnID0+ICREZWJ1ZyApOwokSW50ZXJmYWNlLT5SdW4oKTsK</File>
        <File Location="var/packagesetup/RS4OTRS_API.pm" Permission="644" Encode="Base64">cGFja2FnZSB2YXI6OnBhY2thZ2VzZXR1cDo6UlM0T1RSU19BUEk7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlN5c0NvbmZpZzsKdXNlIERhdGE6OkR1bXBlcjsKdXNlIEZpbGU6OkNvcHkgcXcoY29weSk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OkNvbmZpZycsCiAgICAnS2VybmVsOjpTeXN0ZW06OkNhY2hlJywKICAgICdLZXJuZWw6OlN5c3RlbTo6REInLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpMb2cnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTdGF0cycsCiAgICAnS2VybmVsOjpTeXN0ZW06OlN5c0NvbmZpZycsCiAgICAnS2VybmVsOjpTeXN0ZW06OlZhbGlkJywKKTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIENvZGVJbnN0YWxsIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJElzQWR2YW5jZWRUaWNrZXRTZWFyY2hJbnN0YWxsZWQgPQogICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6QVBJOjpVdGlsJykKICAgICAgLT5Jc0FkdmFuY2VkVGlja2V0U2VhcmNoSW5zdGFsbGVkOwoKICAgIHJldHVybiAxIGlmICEkSXNBZHZhbmNlZFRpY2tldFNlYXJjaEluc3RhbGxlZDsKCiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6VGlja2V0OjpFdmVudDo6Q2hlY2tJbnN0YWxsZWRQYWNrYWdlJyktPlJ1bigKICAgICAgICBFdmVudCAgPT4gJ1BhY2thZ2VJbnN0YWxsJywKICAgICAgICBEYXRhICAgPT4gewogICAgICAgICAgICBOYW1lICAgID0+ICdSUzRPVFJTX0FkdmFuY2VkVGlja2V0U2VhcmNoJywKICAgICAgICAgICAgVmVyc2lvbiA9PiAnNi4xLjI0JwogICAgICAgIH0sCiAgICAgICAgQ29uZmlnID0+IHt9CiAgICApOwogICAgcmV0dXJuIDE7Cn0KCnN1YiBDb2RlVW5pbnN0YWxsIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJElzQWR2YW5jZWRUaWNrZXRTZWFyY2hJbnN0YWxsZWQgPQogICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6QVBJOjpVdGlsJykKICAgICAgLT5Jc0FkdmFuY2VkVGlja2V0U2VhcmNoSW5zdGFsbGVkOwoKICAgIHJldHVybiAxIGlmICEkSXNBZHZhbmNlZFRpY2tldFNlYXJjaEluc3RhbGxlZDsKCiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6VGlja2V0OjpFdmVudDo6Q2hlY2tJbnN0YWxsZWRQYWNrYWdlJyktPlJ1bigKICAgICAgICBFdmVudCAgPT4gJ1BhY2thZ2VVbmluc3RhbGwnLAogICAgICAgIERhdGEgICA9PiB7CiAgICAgICAgICAgIE5hbWUgICAgPT4gJ1JTNE9UUlNfQWR2YW5jZWRUaWNrZXRTZWFyY2gnLAogICAgICAgICAgICBWZXJzaW9uID0+ICc2LjEuMjQnCiAgICAgICAgfSwKICAgICAgICBDb25maWcgPT4ge30KICAgICk7CiAgICByZXR1cm4gMTsKfQoKc3ViIENvZGVSZWluc3RhbGwgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkSXNBZHZhbmNlZFRpY2tldFNlYXJjaEluc3RhbGxlZCA9CiAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpBUEk6OlV0aWwnKQogICAgICAtPklzQWR2YW5jZWRUaWNrZXRTZWFyY2hJbnN0YWxsZWQ7CgogICAgcmV0dXJuIDEgaWYgISRJc0FkdmFuY2VkVGlja2V0U2VhcmNoSW5zdGFsbGVkOwoKICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpUaWNrZXQ6OkV2ZW50OjpDaGVja0luc3RhbGxlZFBhY2thZ2UnKS0+UnVuKAogICAgICAgIEV2ZW50ICA9PiAnUGFja2FnZVJlaW5zdGFsbCcsCiAgICAgICAgRGF0YSAgID0+IHsKICAgICAgICAgICAgTmFtZSAgICA9PiAnUlM0T1RSU19BZHZhbmNlZFRpY2tldFNlYXJjaCcsCiAgICAgICAgICAgIFZlcnNpb24gPT4gJzYuMS4yNCcKICAgICAgICB9LAogICAgICAgIENvbmZpZyA9PiB7fQogICAgKTsKICAgIHJldHVybiAxOwp9CgpzdWIgQ29kZVVwZ3JhZGUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkSXNBZHZhbmNlZFRpY2tldFNlYXJjaEluc3RhbGxlZCA9CiAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpBUEk6OlV0aWwnKQogICAgICAtPklzQWR2YW5jZWRUaWNrZXRTZWFyY2hJbnN0YWxsZWQ7CgogICAgcmV0dXJuIDEgaWYgISRJc0FkdmFuY2VkVGlja2V0U2VhcmNoSW5zdGFsbGVkOwoKICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpUaWNrZXQ6OkV2ZW50OjpDaGVja0luc3RhbGxlZFBhY2thZ2UnKS0+UnVuKAogICAgICAgIEV2ZW50ICA9PiAnUGFja2FnZVVwZ3JhZGUnLAogICAgICAgIERhdGEgICA9PiB7CiAgICAgICAgICAgIE5hbWUgICAgPT4gJ1JTNE9UUlNfQWR2YW5jZWRUaWNrZXRTZWFyY2gnLAogICAgICAgICAgICBWZXJzaW9uID0+ICc2LjEuMjQnCiAgICAgICAgfSwKICAgICAgICBDb25maWcgPT4ge30KICAgICk7CiAgICByZXR1cm4gMTsKfQoKMTsK</File>
        <File Location="Kernel/Autoload/RS_TicketSearch.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Config/Files/XML/API.xml" Permission="644" Encode="Base64"></File>
    </Filelist>
</otrs_package>
