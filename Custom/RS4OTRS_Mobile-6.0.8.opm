<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>RS4OTRS_Mobile</Name>
    <Version>6.0.8</Version>
    <Vendor>Radiant System</Vendor>
    <URL>https://radiantsystem.com</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</License>
    <Description Lang="en">Mobile application setup addon.</Description>
    <Description Lang="ru">Модуль настройки  мобильного приложения.</Description>
    <Framework>6.0.x</Framework>
    <Framework>6.x</Framework>
    <IntroInstall Lang="en" Title="Installation Information" Type="pre"><![CDATA[
<br/>
You are about to install "RS4OTRS_Mobile" addon.
    ]]></IntroInstall>
    <IntroInstall Lang="ru" Title="Информация по установке" Type="pre"><![CDATA[
<br/>
Вы собираетесь установить расширение "RS4OTRS_Mobile".
    ]]></IntroInstall>
    <IntroInstall Format="plain" Lang="en" Title="Thank you!" Type="post"><![CDATA[
<br/>
Thank you for choosing the "RS4OTRS_Mobile" addon.
    ]]></IntroInstall>
    <IntroInstall Format="plain" Lang="ru" Title="Спасибо за выбор!" Type="post"><![CDATA[
<br/>
Спасибо за выбор расширения "RS4OTRS_Mobile".
    ]]></IntroInstall>
    <BuildDate>2022-01-21 19:37:56</BuildDate>
    <BuildHost>localhost</BuildHost>
    <PackageRequired Version="6.44.0">RS4OTRS_API</PackageRequired>
    <Filelist>

        <File Location="Custom/Kernel/Modules/AdminGenericInterfaceTransportHTTPREST_RS.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AgentMobileTicketStatus.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE4IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMjEgUmFkaWFudCBTeXN0ZW0sIGh0dHA6Ly9yYWRpYW50c3lzdGVtLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC50eAojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRNb2JpbGVUaWNrZXRTdGF0dXM7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkTGF5b3V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpOwoKICAgIHJldHVybiAkTGF5b3V0T2JqZWN0LT5BdHRhY2htZW50KAogICAgICAgIENvbnRlbnRUeXBlID0+ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PScgLiAkTGF5b3V0T2JqZWN0LT57Q2hhcnNldH0sCiAgICAgICAgQ29udGVudCAgICAgPT4gJ3t9JywKICAgICAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKICAgICAgICBOb0NhY2hlICAgICA9PiAxLAogICAgKTsgIAp9CgoxOwo=</File>
        <File Location="Custom/Kernel/Modules/AgentMobileTicketClose.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE4IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMjEgUmFkaWFudCBTeXN0ZW0sIGh0dHA6Ly9yYWRpYW50c3lzdGVtLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC50eAojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRNb2JpbGVUaWNrZXRDbG9zZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkU2VsZiA9IHslUGFyYW19OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRMYXlvdXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CgogICAgcmV0dXJuICRMYXlvdXRPYmplY3QtPkF0dGFjaG1lbnQoCiAgICAgICAgQ29udGVudFR5cGUgPT4gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9JyAuICRMYXlvdXRPYmplY3QtPntDaGFyc2V0fSwKICAgICAgICBDb250ZW50ICAgICA9PiAne30nLAogICAgICAgIFR5cGUgICAgICAgID0+ICdpbmxpbmUnLAogICAgICAgIE5vQ2FjaGUgICAgID0+IDEsCiAgICApOyAgCn0KCjE7Cg==</File>
        <File Location="Custom/Kernel/Modules/AgentMobileNewTicket.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE4IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMjEgUmFkaWFudCBTeXN0ZW0sIGh0dHA6Ly9yYWRpYW50c3lzdGVtLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC50eAojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRNb2JpbGVOZXdUaWNrZXQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkTGF5b3V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpOwoKICAgIHJldHVybiAkTGF5b3V0T2JqZWN0LT5BdHRhY2htZW50KAogICAgICAgIENvbnRlbnRUeXBlID0+ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PScgLiAkTGF5b3V0T2JqZWN0LT57Q2hhcnNldH0sCiAgICAgICAgQ29udGVudCAgICAgPT4gJ3t9JywKICAgICAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKICAgICAgICBOb0NhY2hlICAgICA9PiAxLAogICAgKTsgIAp9CgoxOwo=</File>
        <File Location="Custom/Kernel/Modules/AgentMobileTicketNote.pm" Permission="644" Encode="Base64">CiMgLS0KIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxOCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgICAgICAgICAgICAgICAyMDIxIFJhZGlhbnQgU3lzdGVtLCBodHRwOi8vcmFkaWFudHN5c3RlbS5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0zLjAudHgKIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFnZW50TW9iaWxlVGlja2V0Tm90ZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkU2VsZiA9IHslUGFyYW19OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRMYXlvdXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CgogICAgcmV0dXJuICRMYXlvdXRPYmplY3QtPkF0dGFjaG1lbnQoCiAgICAgICAgQ29udGVudFR5cGUgPT4gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9JyAuICRMYXlvdXRPYmplY3QtPntDaGFyc2V0fSwKICAgICAgICBDb250ZW50ICAgICA9PiAne30nLAogICAgICAgIFR5cGUgICAgICAgID0+ICdpbmxpbmUnLAogICAgICAgIE5vQ2FjaGUgICAgID0+IDEsCiAgICApOyAgCn0KCjE7Cg==</File>
        <File Location="Custom/Kernel/Modules/AgentMobileEditTicket.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE4IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMjEgUmFkaWFudCBTeXN0ZW0sIGh0dHA6Ly9yYWRpYW50c3lzdGVtLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC50eAojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRNb2JpbGVFZGl0VGlja2V0OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKb3VyICRPYmplY3RNYW5hZ2VyRGlzYWJsZWQgPSAxOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJExheW91dE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKCiAgICByZXR1cm4gJExheW91dE9iamVjdC0+QXR0YWNobWVudCgKICAgICAgICBDb250ZW50VHlwZSA9PiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD0nIC4gJExheW91dE9iamVjdC0+e0NoYXJzZXR9LAogICAgICAgIENvbnRlbnQgICAgID0+ICd7fScsCiAgICAgICAgVHlwZSAgICAgICAgPT4gJ2lubGluZScsCiAgICAgICAgTm9DYWNoZSAgICAgPT4gMSwKICAgICk7ICAKfQoKMTsK</File>
        <File Location="Custom/Kernel/Output/HTML/Templates/Standard/AdminGenericInterfaceTransportHTTPREST_RS.tt" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/Output/HTML/Templates/Standard/AdminNotificationEventTransportPushSettings.tt" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE4IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMjAgUmFkaWFudCBTeXN0ZW0sIGh0dHA6Ly9yYWRpYW50c3lzdGVtLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC50eAojIC0tCg==</File>
        <File Location="Custom/Kernel/GenericInterface/Transport/HTTP/REST_RS.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/GenericInterface/Invoker/RS/PushNotify.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE4IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMjAgUmFkaWFudCBTeXN0ZW0sIGh0dHA6Ly9yYWRpYW50c3lzdGVtLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC50eAojIC0tCgpwYWNrYWdlIEtlcm5lbDo6R2VuZXJpY0ludGVyZmFjZTo6SW52b2tlcjo6UlM6OlB1c2hOb3RpZnk7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgRGF0YTo6RHVtcGVyOwoKdXNlIGJhc2UgcXcoIEtlcm5lbDo6U3lzdGVtOjpFdmVudEhhbmRsZXIgKTsKCiMgcHJldmVudCAnVXNlZCBvbmNlJyB3YXJuaW5nIGZvciBLZXJuZWw6Ok9NCnVzZSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlcjsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICRTZWxmLT5FdmVudEhhbmRsZXJJbml0KAogICAgICAgIENvbmZpZyA9PiAnVGlja2V0OjpFdmVudE1vZHVsZVBvc3QnLAogICAgKTsKCiAgICBpZiAoICEkUGFyYW17RGVidWdnZXJPYmplY3R9ICkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIFN1Y2Nlc3MgICAgICA9PiAwLAogICAgICAgICAgICBFcnJvck1lc3NhZ2UgPT4gIkdvdCBubyBEZWJ1Z2dlck9iamVjdCEiCiAgICAgICAgfTsKICAgIH0KCiAgICAkU2VsZi0+e0RlYnVnZ2VyT2JqZWN0fSAgID0gJFBhcmFte0RlYnVnZ2VyT2JqZWN0fTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBQcmVwYXJlUmVxdWVzdCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIGlmICggJFBhcmFte0RhdGF9e0V2ZW50fSBlcSAnUHVzaEV2ZW50JyApIHsKCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgU3VjY2VzcyA9PiAxLAogICAgICAgICAgICBEYXRhICAgID0+IHsKICAgICAgICAgICAgICAgIGRhdGEgPT4gewogICAgICAgICAgICAgICAgICAgIHRpdGxlICAgICA9PiAkUGFyYW17RGF0YX17U3ViamVjdH0sCiAgICAgICAgICAgICAgICAgICAgZGV0YWlsICAgID0+ICRQYXJhbXtEYXRhfXtCb2R5fSwKICAgICAgICAgICAgICAgICAgICBzZXJ2ZXIgICAgPT4gJFBhcmFte0RhdGF9e1NlcnZlcn0sCiAgICAgICAgICAgICAgICAgICAgdGlja2V0X2lkID0+ICRQYXJhbXtEYXRhfXtUaWNrZXRJRH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB0byA9PiAkUGFyYW17RGF0YX17VG9rZW59CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKICAgIHJldHVybiB7CiAgICAgICAgU3VjY2VzcyA9PiAxLAogICAgICAgIERhdGEgICAgPT4gJFBhcmFte0RhdGF9CiAgICB9Owp9CgpzdWIgSGFuZGxlUmVzcG9uc2UgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkRHluRmllbGRCYWNrID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZDo6QmFja2VuZCcpOwoKICAgIGlmICggISRQYXJhbXtSZXNwb25zZVN1Y2Nlc3N9ICkgewogICAgICAgIGlmICggIUlzU3RyaW5nV2l0aERhdGEoICRQYXJhbXtSZXNwb25zZUVycm9yTWVzc2FnZX0gKSApIHsKCiAgICAgICAgICAgIHJldHVybiAkU2VsZi0+e0RlYnVnZ2VyT2JqZWN0fS0+RXJyb3IoCiAgICAgICAgICAgICAgICBTdW1tYXJ5ID0+ICdHb3QgcmVzcG9uc2UgZXJyb3IsIGJ1dCBubyByZXNwb25zZSBlcnJvciBtZXNzYWdlIScsCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBTdWNjZXNzICAgICAgPT4gMCwKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRQYXJhbXtSZXNwb25zZUVycm9yTWVzc2FnZX0sCiAgICAgICAgfTsKICAgIH0KCiAgICBpZiAoICRQYXJhbXtEYXRhfXtmYWlsdXJlfSApIHsKICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6QVBJOjpTZXR0aW5nJykKICAgICAgICAgICAgLT5VcGRhdGVGYWlsZWROb3RpZmljYXRpb25Db3VudCgKICAgICAgICAgICAgICAgIFRva2VuID0+ICRQYXJhbXtEYXRhfXtfUmVxdWVzdERhdGF9e3RvfQogICAgICAgICAgICApOwogICAgfQoKICAgIHJldHVybiB7CiAgICAgICAgU3VjY2VzcyA9PiAxLAogICAgICAgIERhdGEgICAgPT4gJFBhcmFte0RhdGF9CiAgICB9Owp9CgpzdWIgREVTVFJPWSB7CiAgICBteSAkU2VsZiA9IHNoaWZ0OwoKICAgICRTZWxmLT5FdmVudEhhbmRsZXJUcmFuc2FjdGlvbigpOwoKICAgIHJldHVybiAxOwp9CgoxOwo=</File>
        <File Location="var/webservices/AndroidNotification.yml" Permission="644" Encode="Base64">LS0tCkRlYnVnZ2VyOgogIERlYnVnVGhyZXNob2xkOiBkZWJ1ZwogIFRlc3RNb2RlOiAnMCcKRGVzY3JpcHRpb246ICcnCkZyYW1ld29ya1ZlcnNpb246IDYuMC4xMApQcm92aWRlcjoKICBUcmFuc3BvcnQ6CiAgICBUeXBlOiAnJwpSZW1vdGVTeXN0ZW06ICcnClJlcXVlc3RlcjoKICBJbnZva2VyOgogICAgTm90aWZ5OgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgRXZlbnRzOgogICAgICAtIEFzeW5jaHJvbm91czogJzEnCiAgICAgICAgRXZlbnQ6IFB1c2hFdmVudAogICAgICBNYXBwaW5nSW5ib3VuZDoge30KICAgICAgTWFwcGluZ091dGJvdW5kOiB7fQogICAgICBUeXBlOiBSUzo6UHVzaE5vdGlmeQogIFRyYW5zcG9ydDoKICAgIENvbmZpZzoKICAgICAgRGVmYXVsdENvbW1hbmQ6IFBPU1QKICAgICAgSGVhZGVyczoKICAgICAgICBBdXRob3JpemF0aW9uOiBrZXk9QUFBQVo3ckZJNlE6QVBBOTFiRnFIbE93eWplRDludGsyamM1b1B4b0tNUlpNX0xtTE1McFBqSW9OazdLN2xWRzlTcFRKSHhRa0xmSGo4NXNfQXpEZEl2MFF4b2VRZVZENWk0M1VHWVJ6WlM1NUVsS2tUR0JBTXppYjl1V0JqMmJpSXFlcV9uRjVMcDI0LVJndHd3OEhQNU8KICAgICAgSG9zdDogaHR0cHM6Ly9mY20uZ29vZ2xlYXBpcy5jb20KICAgICAgSW52b2tlckNvbnRyb2xsZXJNYXBwaW5nOgogICAgICAgIE5vdGlmeToKICAgICAgICAgIENvbnRyb2xsZXI6IC9mY20vc2VuZAogICAgICBUaW1lb3V0OiAnMTIwJwogICAgVHlwZTogSFRUUDo6UkVTVF9SUwo=</File>
        <File Location="var/packagesetup/RS4OTRS_Mobile.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Ticket/Event/NotificationEvent/Transport/PushNotification.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE4IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAgICAgICAgICAgICAgIDIwMjAgUmFkaWFudCBTeXN0ZW0sIGh0dHA6Ly9yYWRpYW50c3lzdGVtLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC50eAojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpUaWNrZXQ6OkV2ZW50OjpOb3RpZmljYXRpb25FdmVudDo6VHJhbnNwb3J0OjpQdXNoTm90aWZpY2F0aW9uOwojIyBub2ZpbHRlcihUaWR5QWxsOjpQbHVnaW46Ok9UUlM6OlBlcmw6OkxheW91dE9iamVjdCkKIyMgbm9maWx0ZXIoVGlkeUFsbDo6UGx1Z2luOjpPVFJTOjpQZXJsOjpQYXJhbU9iamVjdCkKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKbm8gd2FybmluZ3MgJ3JlZGVmaW5lJzsKCnVzZSBEYXRhOjpEdW1wZXI7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlZhcmlhYmxlQ2hlY2sgcXcoOmFsbCk7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OkV2ZW50SGFuZGxlcjsKCnVzZSBiYXNlIHF3KAogICAgS2VybmVsOjpTeXN0ZW06OlRpY2tldDo6RXZlbnQ6Ok5vdGlmaWNhdGlvbkV2ZW50OjpUcmFuc3BvcnQ6OkJhc2UKICAgIEtlcm5lbDo6U3lzdGVtOjpFdmVudEhhbmRsZXIKKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6Q29uZmlnJywKICAgICdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0JywKICAgICdLZXJuZWw6OlN5c3RlbTo6RW1haWwnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpMb2cnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpNYWluJywKICAgICdLZXJuZWw6OlN5c3RlbTo6UXVldWUnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTeXN0ZW1BZGRyZXNzJywKICAgICdLZXJuZWw6OlN5c3RlbTo6VGlja2V0JywKICAgICdLZXJuZWw6OlN5c3RlbTo6VXNlcicsCiAgICAnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcsCik7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OlRpY2tldDo6RXZlbnQ6Ok5vdGlmaWNhdGlvbkV2ZW50OjpUcmFuc3BvcnQ6OkVtYWlsIC0gZW1haWwgdHJhbnNwb3J0IGxheWVyCgo9aGVhZDEgU1lOT1BTSVMKCk5vdGlmaWNhdGlvbiBldmVudCB0cmFuc3BvcnQgbGF5ZXIuCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBhIG5vdGlmaWNhdGlvbiB0cmFuc3BvcnQgb2JqZWN0LiBEbyBub3QgdXNlIGl0IGRpcmVjdGx5LCBpbnN0ZWFkIHVzZToKCiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXI7CiAgICBsb2NhbCAkS2VybmVsOjpPTSA9IEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyLT5uZXcoJycpOwogICAgbXkgJFRyYW5zcG9ydE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpUaWNrZXQ6OkV2ZW50OjpOb3RpZmljYXRpb25FdmVudDo6VHJhbnNwb3J0OjpFbWFpbCcpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgJFNlbGYtPkV2ZW50SGFuZGxlckluaXQoCiAgICAgICAgQ29uZmlnID0+ICdUaWNrZXQ6OkV2ZW50TW9kdWxlUG9zdCcsCiAgICApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFNlbmROb3RpZmljYXRpb24gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoVGlja2V0SUQgVXNlcklEIE5vdGlmaWNhdGlvbiBSZWNpcGllbnQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyROZWVkZWR9ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAnTmVlZCAkTmVlZGVkIScsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CiAgICBteSAkUmVjaXBpZW50SUQgPSAkUGFyYW17UmVjaXBpZW50fXtVc2VySUR9OwoKICAgIG15ICRDb25maWdPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpOwoKICAgIG15ICVOb3RpZmljYXRpb24gPSAleyAkUGFyYW17Tm90aWZpY2F0aW9ufSB9OwoKICAgICROb3RpZmljYXRpb257Qm9keX0gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SFRNTFV0aWxzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAtPlRvQXNjaWkoIFN0cmluZyA9PiAkTm90aWZpY2F0aW9ue0JvZHl9ICk7CgogICAgbXkgJFV0aWxPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6QVBJOjpVdGlsJyk7CgojICAgIGZvciBteSAkUmVjaXBpZW50SUQgKCBAeyAkTm90aWZpY2F0aW9ue0RhdGF9e1JlY2lwaWVudEFnZW50c30gfSApIHsKCiAgICAgICAgbXkgJFRva2VuID0gJFV0aWxPYmplY3QtPkdldFVzZXJUb2tlbiggVXNlcklEID0+ICRSZWNpcGllbnRJRCApOwoKIyAgICAgICAgbmV4dCB1bmxlc3MgJFRva2VuOwogICAgICAgIHJldHVybiB1bmxlc3MgJFRva2VuOwoKICAgICAgICAkU2VsZi0+RXZlbnRIYW5kbGVyKAogICAgICAgICAgICBFdmVudCA9PiAnUHVzaEV2ZW50JywKICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICBFdmVudCAgICA9PiAnUHVzaEV2ZW50JywKICAgICAgICAgICAgICAgIFVzZXJJRCAgID0+ICRSZWNpcGllbnRJRCwKICAgICAgICAgICAgICAgIFN1YmplY3QgID0+ICROb3RpZmljYXRpb257U3ViamVjdH0sCiAgICAgICAgICAgICAgICBCb2R5ICAgICA9PiAkTm90aWZpY2F0aW9ue0JvZHl9LAogICAgICAgICAgICAgICAgVG9rZW4gICAgPT4gJFRva2VuLAogICAgICAgICAgICAgICAgU2VydmVyICAgPT4gJENvbmZpZ09iamVjdC0+R2V0KCdGUUROJykgLy8gJycsCiAgICAgICAgICAgICAgICBUaWNrZXRJRCA9PiAkUGFyYW17VGlja2V0SUR9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFVzZXJJRCA9PiAxCiAgICAgICAgKTsKIyAgICB9CgogICAgcmV0dXJuIDE7Cn0KCnN1YiBHZXRUcmFuc3BvcnRSZWNpcGllbnRzIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuICgpOwp9CgpzdWIgVHJhbnNwb3J0U2V0dGluZ3NEaXNwbGF5R2V0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBnZXQgbGF5b3V0IG9iamVjdAogICAgbXkgJExheW91dE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKCiAgICAjIGdlbmVyYXRlIEhUTUwKICAgIG15ICRPdXRwdXQgPSAkTGF5b3V0T2JqZWN0LT5PdXRwdXQoCiAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZG1pbk5vdGlmaWNhdGlvbkV2ZW50VHJhbnNwb3J0UHVzaFNldHRpbmdzJywKICAgICAgICBEYXRhICAgICAgICAgPT4gXCVQYXJhbSwKICAgICk7CgogICAgcmV0dXJuICRPdXRwdXQ7Cn0KCnN1YiBUcmFuc3BvcnRQYXJhbVNldHRpbmdzR2V0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgZm9yIG15ICROZWVkZWQgKHF3KEdldFBhcmFtKSkgewogICAgICAgIGlmICggISRQYXJhbXskTmVlZGVkfSApIHsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJE5lZWRlZCIsCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQoKICAgICMgZ2V0IHBhcmFtIG9iamVjdAo9YQogICAgbXkgJFBhcmFtT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcpOwoKICAgIFBBUkFNRVRFUjoKICAgIGZvciBteSAkUGFyYW1ldGVyIChxdyhSZWNpcGllbnRQaG9uZU51bWJlcikpIHsKICAgICAgICBteSBARGF0YSA9ICRQYXJhbU9iamVjdC0+R2V0QXJyYXkoIFBhcmFtID0+ICRQYXJhbWV0ZXIgKTsKICAgICAgICBuZXh0IFBBUkFNRVRFUiBpZiAhQERhdGE7CiAgICAgICAgJFBhcmFte0dldFBhcmFtfS0+e0RhdGF9LT57JFBhcmFtZXRlcn0gPSBcQERhdGE7CiAgICB9Cj1jdXQKCiAgICAjIE5vdGU6IEV4YW1wbGUgaG93IHRvIHNldCBlcnJvcnMgYW5kIHVzZSB0aGVtCiAgICAjIG9uIHRoZSBub3JtYWwgQWRtaW5Ob3RpZmljYXRpb25FdmVudCBzY3JlZW4KICAgICMgIyBzZXQgZXJyb3IKICAgICMgJFBhcmFte0dldFBhcmFtfS0+eyRQYXJhbWV0ZXIuJ1NlcnZlckVycm9yJ30gPSAnU2VydmVyRXJyb3InOwoKICAgIHJldHVybiAxOwp9CgpzdWIgSXNVc2FibGUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGRlZmluZSBpZiB0aGlzIHRyYW5zcG9ydCBpcyB1c2FibGUgb24KICAgICMgdGhpcyBzcGVjaWZpYyBtb21lbnQKICAgIHJldHVybiAxOwp9CgpzdWIgREVTVFJPWSB7CiAgICBteSAkU2VsZiA9IHNoaWZ0OwoKICAgICRTZWxmLT5FdmVudEhhbmRsZXJUcmFuc2FjdGlvbigpOwoKICAgIHJldHVybiAxOwp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKEw8aHR0cDovL290cnMub3JnLz4pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAoK</File>
        <File Location="Kernel/Config/Files/XML/Mobile.xml" Permission="644" Encode="Base64"></File>
    </Filelist>
    <CodeInstall Type="post"><![CDATA[
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        $Kernel::OM->Get($CodeModule)->CodeInstall();
    ]]></CodeInstall>
    <CodeUninstall Type="pre"><![CDATA[
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        $Kernel::OM->Get($CodeModule)->CodeUninstall();
    ]]></CodeUninstall>
    <CodeUpgrade Type="pre" Version="6.0.6.2"><![CDATA[
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        $Kernel::OM->Get($CodeModule)->CodeUpgrade();
    ]]></CodeUpgrade>

    <DatabaseInstall>
        <TableCreate Type="post" Name="RS_user_push_token">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="user_id" Required="true" Type="INTEGER"></Column>
            <Column Name="token" Required="true" Size="256" Type="VARCHAR"></Column>
            <Column Name="added_date" Required="true" Type="DATE"></Column>
            <Column Name="added_by" Required="true" Type="INTEGER"></Column>
            <Column Name="failed_count" Required="true" Size="200" Type="SMALLINT" Default="0"></Column>
        </TableCreate>
    </DatabaseInstall>
    <DatabaseUninstall>
        <TableDrop Type="post" Name="RS_user_push_token">
        </TableDrop>
    </DatabaseUninstall>
</otrs_package>
